
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00001284 memsz 0x00001284 flags r-x
    LOAD off    0x000022a4 vaddr 0x000052a4 paddr 0x00005578 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x0000284c vaddr 0x0000584c paddr 0x0000584c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000123c  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0000525c  0000525c  0000225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  000052a4  00005578  000022a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  0000584c  0000584c  0000284c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003d0  00000000  00000000  000025a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000053dc  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019f6  00000000  00000000  00007d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e46  00000000  00000000  00009742  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005b8  00000000  00000000  0000b588  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f21  00000000  00000000  0000bb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000094b  00000000  00000000  0000ca61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000030  00000000  00000000  0000d3ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000050  00000000  00000000  0000d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000e83d  2**0
                  CONTENTS, READONLY
 16 .cpu          00000005  00000000  00000000  0000e840  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000e845  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000e846  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0000e847  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0000e84b  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000e84f  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000e853  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0000e85e  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000e869  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0000e874  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000020  00000000  00000000  0000e87f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002b558  00000000  00000000  0000e89f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
0000525c l    d  .rodata	00000000 .rodata
000052a4 l    d  .rwdata	00000000 .rwdata
0000584c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
00004068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000052a4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000042a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000043fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004538 l     F .text	00000038 alt_dev_reg
00005384 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00004824 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004980 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000049ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004b08 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00004c40 l     F .text	00000050 alt_get_errno
00004c90 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 
00004394 g     F .text	00000068 alt_main
000040a0 g     F .text	00000080 _puts_r
00005578 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000001c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
0000584c g     O .bss	00000004 errno
00005854 g     O .bss	00000004 alt_argv
0000d558 g       *ABS*	00000000 _gp
000053d8 g     O .rwdata	00000180 alt_fd_list
00004f30 g     F .text	00000090 alt_find_dev
00004bc8 g     F .text	00000078 alt_io_redirect
00004120 g     F .text	00000014 puts
00004698 g     F .text	000000f4 altera_avalon_jtag_uart_read
00005188 g     F .text	0000008c alt_icache_flush
00004000 g       *ABS*	00000000 __alt_mem_ram
00005570 g     O .rwdata	00000004 alt_max_fd
00005558 g     O .rwdata	00000004 _global_impure_ptr
0000585c g       *ABS*	00000000 __bss_end
000053b0 g     O .rwdata	00000028 alt_dev_null
0000493c g     F .text	00000044 alt_dcache_flush_all
00005578 g       *ABS*	00000000 __ram_rwdata_end
00005568 g     O .rwdata	00000008 alt_dev_list
0000444c g     F .text	000000ec write
000052a4 g       *ABS*	00000000 __ram_rodata_end
0000585c g       *ABS*	00000000 end
00006800 g       *ABS*	00000000 __alt_stack_pointer
0000478c g     F .text	00000098 altera_avalon_jtag_uart_write
00004020 g     F .text	0000004c _start
000045a4 g     F .text	00000034 alt_sys_init
000052a4 g       *ABS*	00000000 __ram_rwdata_start
0000525c g       *ABS*	00000000 __ram_rodata_start
000045d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000050d4 g     F .text	000000b4 alt_get_fd
00005214 g     F .text	00000048 memcmp
0000585c g       *ABS*	00000000 __alt_stack_base
00004fc0 g     F .text	00000114 alt_find_file
000049fc g     F .text	000000a0 alt_dev_llist_insert
0000415c g     F .text	000000e0 __sfvwrite_small_dev
0000584c g       *ABS*	00000000 __bss_start
0000406c g     F .text	00000034 main
00005858 g     O .bss	00000004 alt_envp
00004638 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00005574 g     O .rwdata	00000004 alt_errno
0000525c g       *ABS*	00000000 __flash_rodata_start
00004570 g     F .text	00000034 alt_irq_init
00004eb0 g     F .text	00000060 alt_release_fd
0000423c g     F .text	0000006c _write_r
0000555c g     O .rwdata	00000004 _impure_ptr
00005850 g     O .bss	00000004 alt_argc
00005560 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005578 g       *ABS*	00000000 _edata
0000585c g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004f10 g     F .text	00000020 altera_nios2_qsys_irq_init
00006800 g       *ABS*	00000000 __alt_data_end
00004a9c g     F .text	0000003c _exit
00004134 g     F .text	00000028 strlen
00004d5c g     F .text	00000154 open
00004ad8 g     F .text	00000030 alt_icache_flush_all
00004874 g     F .text	000000c8 close
00004314 g     F .text	00000080 alt_load



Disassembly of section .entry:

00004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    4000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    4004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    4008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    400c:	00bffd16 	blt	zero,r2,4004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4014:	08500814 	ori	at,at,16416
    jmp r1
    4018:	0800683a 	jmp	at
    401c:	00000000 	call	0 <__alt_mem_ram-0x4000>

Disassembly of section .text:

00004020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    4020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    4024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    4028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    402c:	00bffd16 	blt	zero,r2,4024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4034:	deda0014 	ori	sp,sp,26624
    movhi gp, %hi(_gp)
    4038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    403c:	d6b55614 	ori	gp,gp,54616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4044:	10961314 	ori	r2,r2,22604

    movhi r3, %hi(__bss_end)
    4048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    404c:	18d61714 	ori	r3,r3,22620

    beq r2, r3, 1f
    4050:	10c00326 	beq	r2,r3,4060 <_start+0x40>

0:
    stw zero, (r2)
    4054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    405c:	10fffd36 	bltu	r2,r3,4054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4060:	00043140 	call	4314 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4064:	00043940 	call	4394 <alt_main>

00004068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4068:	003fff06 	br	4068 <alt_after_alt_main>

0000406c <main>:
 */

#include <stdio.h>

int main()
{
    406c:	defffe04 	addi	sp,sp,-8
    4070:	dfc00115 	stw	ra,4(sp)
    4074:	df000015 	stw	fp,0(sp)
    4078:	d839883a 	mov	fp,sp
		int i=0;
		while(i<50000){
			i++;
		}
	}*/
	printf("Hello world!\n");
    407c:	01000034 	movhi	r4,0
    4080:	21149704 	addi	r4,r4,21084
    4084:	00041200 	call	4120 <puts>
  return 0;
    4088:	0005883a 	mov	r2,zero
}
    408c:	e037883a 	mov	sp,fp
    4090:	dfc00117 	ldw	ra,4(sp)
    4094:	df000017 	ldw	fp,0(sp)
    4098:	dec00204 	addi	sp,sp,8
    409c:	f800283a 	ret

000040a0 <_puts_r>:
    40a0:	defffd04 	addi	sp,sp,-12
    40a4:	dc000015 	stw	r16,0(sp)
    40a8:	2021883a 	mov	r16,r4
    40ac:	2809883a 	mov	r4,r5
    40b0:	dfc00215 	stw	ra,8(sp)
    40b4:	dc400115 	stw	r17,4(sp)
    40b8:	2823883a 	mov	r17,r5
    40bc:	00041340 	call	4134 <strlen>
    40c0:	81400217 	ldw	r5,8(r16)
    40c4:	00c00034 	movhi	r3,0
    40c8:	18d05704 	addi	r3,r3,16732
    40cc:	880d883a 	mov	r6,r17
    40d0:	8009883a 	mov	r4,r16
    40d4:	28c00115 	stw	r3,4(r5)
    40d8:	100f883a 	mov	r7,r2
    40dc:	183ee83a 	callr	r3
    40e0:	047fffc4 	movi	r17,-1
    40e4:	14400926 	beq	r2,r17,410c <_puts_r+0x6c>
    40e8:	81400217 	ldw	r5,8(r16)
    40ec:	8009883a 	mov	r4,r16
    40f0:	01800034 	movhi	r6,0
    40f4:	31949b04 	addi	r6,r6,21100
    40f8:	28800117 	ldw	r2,4(r5)
    40fc:	01c00044 	movi	r7,1
    4100:	103ee83a 	callr	r2
    4104:	14400126 	beq	r2,r17,410c <_puts_r+0x6c>
    4108:	0005883a 	mov	r2,zero
    410c:	dfc00217 	ldw	ra,8(sp)
    4110:	dc400117 	ldw	r17,4(sp)
    4114:	dc000017 	ldw	r16,0(sp)
    4118:	dec00304 	addi	sp,sp,12
    411c:	f800283a 	ret

00004120 <puts>:
    4120:	00800034 	movhi	r2,0
    4124:	10955704 	addi	r2,r2,21852
    4128:	200b883a 	mov	r5,r4
    412c:	11000017 	ldw	r4,0(r2)
    4130:	00040a01 	jmpi	40a0 <_puts_r>

00004134 <strlen>:
    4134:	20800007 	ldb	r2,0(r4)
    4138:	10000626 	beq	r2,zero,4154 <strlen+0x20>
    413c:	2005883a 	mov	r2,r4
    4140:	10800044 	addi	r2,r2,1
    4144:	10c00007 	ldb	r3,0(r2)
    4148:	183ffd1e 	bne	r3,zero,4140 <strlen+0xc>
    414c:	1105c83a 	sub	r2,r2,r4
    4150:	f800283a 	ret
    4154:	0005883a 	mov	r2,zero
    4158:	f800283a 	ret

0000415c <__sfvwrite_small_dev>:
    415c:	2880000b 	ldhu	r2,0(r5)
    4160:	defffa04 	addi	sp,sp,-24
    4164:	dcc00315 	stw	r19,12(sp)
    4168:	10c0020c 	andi	r3,r2,8
    416c:	18ffffcc 	andi	r3,r3,65535
    4170:	18e0001c 	xori	r3,r3,32768
    4174:	dc800215 	stw	r18,8(sp)
    4178:	dc400115 	stw	r17,4(sp)
    417c:	dfc00515 	stw	ra,20(sp)
    4180:	dd000415 	stw	r20,16(sp)
    4184:	dc000015 	stw	r16,0(sp)
    4188:	18e00004 	addi	r3,r3,-32768
    418c:	2825883a 	mov	r18,r5
    4190:	2027883a 	mov	r19,r4
    4194:	3023883a 	mov	r17,r6
    4198:	18002626 	beq	r3,zero,4234 <__sfvwrite_small_dev+0xd8>
    419c:	2940008f 	ldh	r5,2(r5)
    41a0:	28001016 	blt	r5,zero,41e4 <__sfvwrite_small_dev+0x88>
    41a4:	01c01a0e 	bge	zero,r7,4210 <__sfvwrite_small_dev+0xb4>
    41a8:	3821883a 	mov	r16,r7
    41ac:	05010004 	movi	r20,1024
    41b0:	00000306 	br	41c0 <__sfvwrite_small_dev+0x64>
    41b4:	88a3883a 	add	r17,r17,r2
    41b8:	0400150e 	bge	zero,r16,4210 <__sfvwrite_small_dev+0xb4>
    41bc:	9140008f 	ldh	r5,2(r18)
    41c0:	880d883a 	mov	r6,r17
    41c4:	9809883a 	mov	r4,r19
    41c8:	800f883a 	mov	r7,r16
    41cc:	a400010e 	bge	r20,r16,41d4 <__sfvwrite_small_dev+0x78>
    41d0:	01c10004 	movi	r7,1024
    41d4:	000423c0 	call	423c <_write_r>
    41d8:	80a1c83a 	sub	r16,r16,r2
    41dc:	00bff516 	blt	zero,r2,41b4 <__sfvwrite_small_dev+0x58>
    41e0:	9080000b 	ldhu	r2,0(r18)
    41e4:	10801014 	ori	r2,r2,64
    41e8:	9080000d 	sth	r2,0(r18)
    41ec:	00bfffc4 	movi	r2,-1
    41f0:	dfc00517 	ldw	ra,20(sp)
    41f4:	dd000417 	ldw	r20,16(sp)
    41f8:	dcc00317 	ldw	r19,12(sp)
    41fc:	dc800217 	ldw	r18,8(sp)
    4200:	dc400117 	ldw	r17,4(sp)
    4204:	dc000017 	ldw	r16,0(sp)
    4208:	dec00604 	addi	sp,sp,24
    420c:	f800283a 	ret
    4210:	0005883a 	mov	r2,zero
    4214:	dfc00517 	ldw	ra,20(sp)
    4218:	dd000417 	ldw	r20,16(sp)
    421c:	dcc00317 	ldw	r19,12(sp)
    4220:	dc800217 	ldw	r18,8(sp)
    4224:	dc400117 	ldw	r17,4(sp)
    4228:	dc000017 	ldw	r16,0(sp)
    422c:	dec00604 	addi	sp,sp,24
    4230:	f800283a 	ret
    4234:	00bfffc4 	movi	r2,-1
    4238:	003fed06 	br	41f0 <__sfvwrite_small_dev+0x94>

0000423c <_write_r>:
    423c:	defffd04 	addi	sp,sp,-12
    4240:	dc400115 	stw	r17,4(sp)
    4244:	dc000015 	stw	r16,0(sp)
    4248:	2023883a 	mov	r17,r4
    424c:	04000034 	movhi	r16,0
    4250:	84161304 	addi	r16,r16,22604
    4254:	2809883a 	mov	r4,r5
    4258:	300b883a 	mov	r5,r6
    425c:	380d883a 	mov	r6,r7
    4260:	dfc00215 	stw	ra,8(sp)
    4264:	80000015 	stw	zero,0(r16)
    4268:	000444c0 	call	444c <write>
    426c:	00ffffc4 	movi	r3,-1
    4270:	10c00526 	beq	r2,r3,4288 <_write_r+0x4c>
    4274:	dfc00217 	ldw	ra,8(sp)
    4278:	dc400117 	ldw	r17,4(sp)
    427c:	dc000017 	ldw	r16,0(sp)
    4280:	dec00304 	addi	sp,sp,12
    4284:	f800283a 	ret
    4288:	80c00017 	ldw	r3,0(r16)
    428c:	183ff926 	beq	r3,zero,4274 <_write_r+0x38>
    4290:	88c00015 	stw	r3,0(r17)
    4294:	dfc00217 	ldw	ra,8(sp)
    4298:	dc400117 	ldw	r17,4(sp)
    429c:	dc000017 	ldw	r16,0(sp)
    42a0:	dec00304 	addi	sp,sp,12
    42a4:	f800283a 	ret

000042a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    42a8:	defffc04 	addi	sp,sp,-16
    42ac:	df000315 	stw	fp,12(sp)
    42b0:	df000304 	addi	fp,sp,12
    42b4:	e13ffd15 	stw	r4,-12(fp)
    42b8:	e17ffe15 	stw	r5,-8(fp)
    42bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    42c0:	e0fffe17 	ldw	r3,-8(fp)
    42c4:	e0bffd17 	ldw	r2,-12(fp)
    42c8:	18800e26 	beq	r3,r2,4304 <alt_load_section+0x5c>
  {
    while( to != end )
    42cc:	00000a06 	br	42f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    42d0:	e0bffd17 	ldw	r2,-12(fp)
    42d4:	10c00017 	ldw	r3,0(r2)
    42d8:	e0bffe17 	ldw	r2,-8(fp)
    42dc:	10c00015 	stw	r3,0(r2)
    42e0:	e0bffe17 	ldw	r2,-8(fp)
    42e4:	10800104 	addi	r2,r2,4
    42e8:	e0bffe15 	stw	r2,-8(fp)
    42ec:	e0bffd17 	ldw	r2,-12(fp)
    42f0:	10800104 	addi	r2,r2,4
    42f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    42f8:	e0fffe17 	ldw	r3,-8(fp)
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	18bff31e 	bne	r3,r2,42d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    4304:	e037883a 	mov	sp,fp
    4308:	df000017 	ldw	fp,0(sp)
    430c:	dec00104 	addi	sp,sp,4
    4310:	f800283a 	ret

00004314 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4314:	defffe04 	addi	sp,sp,-8
    4318:	dfc00115 	stw	ra,4(sp)
    431c:	df000015 	stw	fp,0(sp)
    4320:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4324:	01000034 	movhi	r4,0
    4328:	21155e04 	addi	r4,r4,21880
    432c:	01400034 	movhi	r5,0
    4330:	2954a904 	addi	r5,r5,21156
    4334:	01800034 	movhi	r6,0
    4338:	31955e04 	addi	r6,r6,21880
    433c:	00042a80 	call	42a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4340:	01000034 	movhi	r4,0
    4344:	21100804 	addi	r4,r4,16416
    4348:	01400034 	movhi	r5,0
    434c:	29500804 	addi	r5,r5,16416
    4350:	01800034 	movhi	r6,0
    4354:	31900804 	addi	r6,r6,16416
    4358:	00042a80 	call	42a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    435c:	01000034 	movhi	r4,0
    4360:	21149704 	addi	r4,r4,21084
    4364:	01400034 	movhi	r5,0
    4368:	29549704 	addi	r5,r5,21084
    436c:	01800034 	movhi	r6,0
    4370:	3194a904 	addi	r6,r6,21156
    4374:	00042a80 	call	42a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4378:	000493c0 	call	493c <alt_dcache_flush_all>
  alt_icache_flush_all();
    437c:	0004ad80 	call	4ad8 <alt_icache_flush_all>
}
    4380:	e037883a 	mov	sp,fp
    4384:	dfc00117 	ldw	ra,4(sp)
    4388:	df000017 	ldw	fp,0(sp)
    438c:	dec00204 	addi	sp,sp,8
    4390:	f800283a 	ret

00004394 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4394:	defffd04 	addi	sp,sp,-12
    4398:	dfc00215 	stw	ra,8(sp)
    439c:	df000115 	stw	fp,4(sp)
    43a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    43a4:	0009883a 	mov	r4,zero
    43a8:	00045700 	call	4570 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    43ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    43b0:	00045a40 	call	45a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    43b4:	01000034 	movhi	r4,0
    43b8:	21149c04 	addi	r4,r4,21104
    43bc:	01400034 	movhi	r5,0
    43c0:	29549c04 	addi	r5,r5,21104
    43c4:	01800034 	movhi	r6,0
    43c8:	31949c04 	addi	r6,r6,21104
    43cc:	0004bc80 	call	4bc8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    43d0:	d120be17 	ldw	r4,-32008(gp)
    43d4:	d0e0bf17 	ldw	r3,-32004(gp)
    43d8:	d0a0c017 	ldw	r2,-32000(gp)
    43dc:	180b883a 	mov	r5,r3
    43e0:	100d883a 	mov	r6,r2
    43e4:	000406c0 	call	406c <main>
    43e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    43ec:	01000044 	movi	r4,1
    43f0:	00048740 	call	4874 <close>
  exit (result);
    43f4:	e13fff17 	ldw	r4,-4(fp)
    43f8:	0004a9c0 	call	4a9c <_exit>

000043fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    43fc:	defffe04 	addi	sp,sp,-8
    4400:	dfc00115 	stw	ra,4(sp)
    4404:	df000015 	stw	fp,0(sp)
    4408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    440c:	00800034 	movhi	r2,0
    4410:	10955d04 	addi	r2,r2,21876
    4414:	10800017 	ldw	r2,0(r2)
    4418:	10000526 	beq	r2,zero,4430 <alt_get_errno+0x34>
    441c:	00800034 	movhi	r2,0
    4420:	10955d04 	addi	r2,r2,21876
    4424:	10800017 	ldw	r2,0(r2)
    4428:	103ee83a 	callr	r2
    442c:	00000206 	br	4438 <alt_get_errno+0x3c>
    4430:	00800034 	movhi	r2,0
    4434:	10961304 	addi	r2,r2,22604
}
    4438:	e037883a 	mov	sp,fp
    443c:	dfc00117 	ldw	ra,4(sp)
    4440:	df000017 	ldw	fp,0(sp)
    4444:	dec00204 	addi	sp,sp,8
    4448:	f800283a 	ret

0000444c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    444c:	defff904 	addi	sp,sp,-28
    4450:	dfc00615 	stw	ra,24(sp)
    4454:	df000515 	stw	fp,20(sp)
    4458:	df000504 	addi	fp,sp,20
    445c:	e13ffd15 	stw	r4,-12(fp)
    4460:	e17ffe15 	stw	r5,-8(fp)
    4464:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4468:	e0bffd17 	ldw	r2,-12(fp)
    446c:	10000616 	blt	r2,zero,4488 <write+0x3c>
    4470:	e0bffd17 	ldw	r2,-12(fp)
    4474:	10c00324 	muli	r3,r2,12
    4478:	00800034 	movhi	r2,0
    447c:	1094f604 	addi	r2,r2,21464
    4480:	1885883a 	add	r2,r3,r2
    4484:	00000106 	br	448c <write+0x40>
    4488:	0005883a 	mov	r2,zero
    448c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4490:	e0bffb17 	ldw	r2,-20(fp)
    4494:	10001f26 	beq	r2,zero,4514 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4498:	e0bffb17 	ldw	r2,-20(fp)
    449c:	10800217 	ldw	r2,8(r2)
    44a0:	108000cc 	andi	r2,r2,3
    44a4:	10001726 	beq	r2,zero,4504 <write+0xb8>
    44a8:	e0bffb17 	ldw	r2,-20(fp)
    44ac:	10800017 	ldw	r2,0(r2)
    44b0:	10800617 	ldw	r2,24(r2)
    44b4:	10001326 	beq	r2,zero,4504 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    44b8:	e0bffb17 	ldw	r2,-20(fp)
    44bc:	10800017 	ldw	r2,0(r2)
    44c0:	10c00617 	ldw	r3,24(r2)
    44c4:	e0bfff17 	ldw	r2,-4(fp)
    44c8:	e13ffb17 	ldw	r4,-20(fp)
    44cc:	e17ffe17 	ldw	r5,-8(fp)
    44d0:	100d883a 	mov	r6,r2
    44d4:	183ee83a 	callr	r3
    44d8:	e0bffc15 	stw	r2,-16(fp)
    44dc:	e0bffc17 	ldw	r2,-16(fp)
    44e0:	1000060e 	bge	r2,zero,44fc <write+0xb0>
      {
        ALT_ERRNO = -rval;
    44e4:	00043fc0 	call	43fc <alt_get_errno>
    44e8:	e0fffc17 	ldw	r3,-16(fp)
    44ec:	00c7c83a 	sub	r3,zero,r3
    44f0:	10c00015 	stw	r3,0(r2)
        return -1;
    44f4:	00bfffc4 	movi	r2,-1
    44f8:	00000a06 	br	4524 <write+0xd8>
      }
      return rval;
    44fc:	e0bffc17 	ldw	r2,-16(fp)
    4500:	00000806 	br	4524 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
    4504:	00043fc0 	call	43fc <alt_get_errno>
    4508:	00c00344 	movi	r3,13
    450c:	10c00015 	stw	r3,0(r2)
    4510:	00000306 	br	4520 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    4514:	00043fc0 	call	43fc <alt_get_errno>
    4518:	00c01444 	movi	r3,81
    451c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    4520:	00bfffc4 	movi	r2,-1
}
    4524:	e037883a 	mov	sp,fp
    4528:	dfc00117 	ldw	ra,4(sp)
    452c:	df000017 	ldw	fp,0(sp)
    4530:	dec00204 	addi	sp,sp,8
    4534:	f800283a 	ret

00004538 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4538:	defffd04 	addi	sp,sp,-12
    453c:	dfc00215 	stw	ra,8(sp)
    4540:	df000115 	stw	fp,4(sp)
    4544:	df000104 	addi	fp,sp,4
    4548:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    454c:	e13fff17 	ldw	r4,-4(fp)
    4550:	01400034 	movhi	r5,0
    4554:	29555a04 	addi	r5,r5,21864
    4558:	00049fc0 	call	49fc <alt_dev_llist_insert>
}
    455c:	e037883a 	mov	sp,fp
    4560:	dfc00117 	ldw	ra,4(sp)
    4564:	df000017 	ldw	fp,0(sp)
    4568:	dec00204 	addi	sp,sp,8
    456c:	f800283a 	ret

00004570 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4570:	defffd04 	addi	sp,sp,-12
    4574:	dfc00215 	stw	ra,8(sp)
    4578:	df000115 	stw	fp,4(sp)
    457c:	df000104 	addi	fp,sp,4
    4580:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    4584:	0004f100 	call	4f10 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4588:	00800044 	movi	r2,1
    458c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4590:	e037883a 	mov	sp,fp
    4594:	dfc00117 	ldw	ra,4(sp)
    4598:	df000017 	ldw	fp,0(sp)
    459c:	dec00204 	addi	sp,sp,8
    45a0:	f800283a 	ret

000045a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    45a4:	defffe04 	addi	sp,sp,-8
    45a8:	dfc00115 	stw	ra,4(sp)
    45ac:	df000015 	stw	fp,0(sp)
    45b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    45b4:	01000034 	movhi	r4,0
    45b8:	2114e104 	addi	r4,r4,21380
    45bc:	00045380 	call	4538 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    45c0:	0001883a 	nop
}
    45c4:	e037883a 	mov	sp,fp
    45c8:	dfc00117 	ldw	ra,4(sp)
    45cc:	df000017 	ldw	fp,0(sp)
    45d0:	dec00204 	addi	sp,sp,8
    45d4:	f800283a 	ret

000045d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    45d8:	defffa04 	addi	sp,sp,-24
    45dc:	dfc00515 	stw	ra,20(sp)
    45e0:	df000415 	stw	fp,16(sp)
    45e4:	df000404 	addi	fp,sp,16
    45e8:	e13ffd15 	stw	r4,-12(fp)
    45ec:	e17ffe15 	stw	r5,-8(fp)
    45f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    45f4:	e0bffd17 	ldw	r2,-12(fp)
    45f8:	10800017 	ldw	r2,0(r2)
    45fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4600:	e0bffc17 	ldw	r2,-16(fp)
    4604:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    4608:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    460c:	10800217 	ldw	r2,8(r2)
    4610:	1809883a 	mov	r4,r3
    4614:	e17ffe17 	ldw	r5,-8(fp)
    4618:	e1bfff17 	ldw	r6,-4(fp)
    461c:	100f883a 	mov	r7,r2
    4620:	00046980 	call	4698 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4624:	e037883a 	mov	sp,fp
    4628:	dfc00117 	ldw	ra,4(sp)
    462c:	df000017 	ldw	fp,0(sp)
    4630:	dec00204 	addi	sp,sp,8
    4634:	f800283a 	ret

00004638 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4638:	defffa04 	addi	sp,sp,-24
    463c:	dfc00515 	stw	ra,20(sp)
    4640:	df000415 	stw	fp,16(sp)
    4644:	df000404 	addi	fp,sp,16
    4648:	e13ffd15 	stw	r4,-12(fp)
    464c:	e17ffe15 	stw	r5,-8(fp)
    4650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4654:	e0bffd17 	ldw	r2,-12(fp)
    4658:	10800017 	ldw	r2,0(r2)
    465c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4660:	e0bffc17 	ldw	r2,-16(fp)
    4664:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    4668:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    466c:	10800217 	ldw	r2,8(r2)
    4670:	1809883a 	mov	r4,r3
    4674:	e17ffe17 	ldw	r5,-8(fp)
    4678:	e1bfff17 	ldw	r6,-4(fp)
    467c:	100f883a 	mov	r7,r2
    4680:	000478c0 	call	478c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    4684:	e037883a 	mov	sp,fp
    4688:	dfc00117 	ldw	ra,4(sp)
    468c:	df000017 	ldw	fp,0(sp)
    4690:	dec00204 	addi	sp,sp,8
    4694:	f800283a 	ret

00004698 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    4698:	defff704 	addi	sp,sp,-36
    469c:	df000815 	stw	fp,32(sp)
    46a0:	df000804 	addi	fp,sp,32
    46a4:	e13ffc15 	stw	r4,-16(fp)
    46a8:	e17ffd15 	stw	r5,-12(fp)
    46ac:	e1bffe15 	stw	r6,-8(fp)
    46b0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    46b4:	e0bffc17 	ldw	r2,-16(fp)
    46b8:	10800017 	ldw	r2,0(r2)
    46bc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    46c0:	e0bffd17 	ldw	r2,-12(fp)
    46c4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    46c8:	e0bffe17 	ldw	r2,-8(fp)
    46cc:	e0fffd17 	ldw	r3,-12(fp)
    46d0:	1885883a 	add	r2,r3,r2
    46d4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    46d8:	00001406 	br	472c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    46dc:	e0bff917 	ldw	r2,-28(fp)
    46e0:	10800037 	ldwio	r2,0(r2)
    46e4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    46e8:	e0bffb17 	ldw	r2,-20(fp)
    46ec:	10a0000c 	andi	r2,r2,32768
    46f0:	10000826 	beq	r2,zero,4714 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    46f4:	e0bffb17 	ldw	r2,-20(fp)
    46f8:	1007883a 	mov	r3,r2
    46fc:	e0bff817 	ldw	r2,-32(fp)
    4700:	10c00005 	stb	r3,0(r2)
    4704:	e0bff817 	ldw	r2,-32(fp)
    4708:	10800044 	addi	r2,r2,1
    470c:	e0bff815 	stw	r2,-32(fp)
    4710:	00000606 	br	472c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    4714:	e0fff817 	ldw	r3,-32(fp)
    4718:	e0bffd17 	ldw	r2,-12(fp)
    471c:	1880071e 	bne	r3,r2,473c <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    4720:	e0bfff17 	ldw	r2,-4(fp)
    4724:	1090000c 	andi	r2,r2,16384
    4728:	1000061e 	bne	r2,zero,4744 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    472c:	e0fff817 	ldw	r3,-32(fp)
    4730:	e0bffa17 	ldw	r2,-24(fp)
    4734:	18bfe936 	bltu	r3,r2,46dc <altera_avalon_jtag_uart_read+0x44>
    4738:	00000306 	br	4748 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    473c:	0001883a 	nop
    4740:	00000106 	br	4748 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    4744:	0001883a 	nop
    
  }

  if (ptr != buffer)
    4748:	e0fff817 	ldw	r3,-32(fp)
    474c:	e0bffd17 	ldw	r2,-12(fp)
    4750:	18800426 	beq	r3,r2,4764 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    4754:	e0fff817 	ldw	r3,-32(fp)
    4758:	e0bffd17 	ldw	r2,-12(fp)
    475c:	1885c83a 	sub	r2,r3,r2
    4760:	00000606 	br	477c <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    4764:	e0bfff17 	ldw	r2,-4(fp)
    4768:	1090000c 	andi	r2,r2,16384
    476c:	10000226 	beq	r2,zero,4778 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    4770:	00bffd44 	movi	r2,-11
    4774:	00000106 	br	477c <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    4778:	00bffec4 	movi	r2,-5
}
    477c:	e037883a 	mov	sp,fp
    4780:	df000017 	ldw	fp,0(sp)
    4784:	dec00104 	addi	sp,sp,4
    4788:	f800283a 	ret

0000478c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    478c:	defff904 	addi	sp,sp,-28
    4790:	df000615 	stw	fp,24(sp)
    4794:	df000604 	addi	fp,sp,24
    4798:	e13ffc15 	stw	r4,-16(fp)
    479c:	e17ffd15 	stw	r5,-12(fp)
    47a0:	e1bffe15 	stw	r6,-8(fp)
    47a4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    47a8:	e0bffc17 	ldw	r2,-16(fp)
    47ac:	10800017 	ldw	r2,0(r2)
    47b0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    47b4:	e0bffe17 	ldw	r2,-8(fp)
    47b8:	e0fffd17 	ldw	r3,-12(fp)
    47bc:	1885883a 	add	r2,r3,r2
    47c0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    47c4:	00000f06 	br	4804 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    47c8:	e0bffa17 	ldw	r2,-24(fp)
    47cc:	10800104 	addi	r2,r2,4
    47d0:	10800037 	ldwio	r2,0(r2)
    47d4:	10bfffec 	andhi	r2,r2,65535
    47d8:	10000a26 	beq	r2,zero,4804 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    47dc:	e0bffa17 	ldw	r2,-24(fp)
    47e0:	e0fffd17 	ldw	r3,-12(fp)
    47e4:	18c00003 	ldbu	r3,0(r3)
    47e8:	18c03fcc 	andi	r3,r3,255
    47ec:	18c0201c 	xori	r3,r3,128
    47f0:	18ffe004 	addi	r3,r3,-128
    47f4:	e13ffd17 	ldw	r4,-12(fp)
    47f8:	21000044 	addi	r4,r4,1
    47fc:	e13ffd15 	stw	r4,-12(fp)
    4800:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4804:	e0fffd17 	ldw	r3,-12(fp)
    4808:	e0bffb17 	ldw	r2,-20(fp)
    480c:	18bfee36 	bltu	r3,r2,47c8 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    4810:	e0bffe17 	ldw	r2,-8(fp)
}
    4814:	e037883a 	mov	sp,fp
    4818:	df000017 	ldw	fp,0(sp)
    481c:	dec00104 	addi	sp,sp,4
    4820:	f800283a 	ret

00004824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4824:	defffe04 	addi	sp,sp,-8
    4828:	dfc00115 	stw	ra,4(sp)
    482c:	df000015 	stw	fp,0(sp)
    4830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4834:	00800034 	movhi	r2,0
    4838:	10955d04 	addi	r2,r2,21876
    483c:	10800017 	ldw	r2,0(r2)
    4840:	10000526 	beq	r2,zero,4858 <alt_get_errno+0x34>
    4844:	00800034 	movhi	r2,0
    4848:	10955d04 	addi	r2,r2,21876
    484c:	10800017 	ldw	r2,0(r2)
    4850:	103ee83a 	callr	r2
    4854:	00000206 	br	4860 <alt_get_errno+0x3c>
    4858:	00800034 	movhi	r2,0
    485c:	10961304 	addi	r2,r2,22604
}
    4860:	e037883a 	mov	sp,fp
    4864:	dfc00117 	ldw	ra,4(sp)
    4868:	df000017 	ldw	fp,0(sp)
    486c:	dec00204 	addi	sp,sp,8
    4870:	f800283a 	ret

00004874 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    4874:	defffb04 	addi	sp,sp,-20
    4878:	dfc00415 	stw	ra,16(sp)
    487c:	df000315 	stw	fp,12(sp)
    4880:	df000304 	addi	fp,sp,12
    4884:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4888:	e0bfff17 	ldw	r2,-4(fp)
    488c:	10000616 	blt	r2,zero,48a8 <close+0x34>
    4890:	e0bfff17 	ldw	r2,-4(fp)
    4894:	10c00324 	muli	r3,r2,12
    4898:	00800034 	movhi	r2,0
    489c:	1094f604 	addi	r2,r2,21464
    48a0:	1885883a 	add	r2,r3,r2
    48a4:	00000106 	br	48ac <close+0x38>
    48a8:	0005883a 	mov	r2,zero
    48ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    48b0:	e0bffd17 	ldw	r2,-12(fp)
    48b4:	10001826 	beq	r2,zero,4918 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    48b8:	e0bffd17 	ldw	r2,-12(fp)
    48bc:	10800017 	ldw	r2,0(r2)
    48c0:	10800417 	ldw	r2,16(r2)
    48c4:	10000626 	beq	r2,zero,48e0 <close+0x6c>
    48c8:	e0bffd17 	ldw	r2,-12(fp)
    48cc:	10800017 	ldw	r2,0(r2)
    48d0:	10800417 	ldw	r2,16(r2)
    48d4:	e13ffd17 	ldw	r4,-12(fp)
    48d8:	103ee83a 	callr	r2
    48dc:	00000106 	br	48e4 <close+0x70>
    48e0:	0005883a 	mov	r2,zero
    48e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    48e8:	e13fff17 	ldw	r4,-4(fp)
    48ec:	0004eb00 	call	4eb0 <alt_release_fd>
    if (rval < 0)
    48f0:	e0bffe17 	ldw	r2,-8(fp)
    48f4:	1000060e 	bge	r2,zero,4910 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    48f8:	00048240 	call	4824 <alt_get_errno>
    48fc:	e0fffe17 	ldw	r3,-8(fp)
    4900:	00c7c83a 	sub	r3,zero,r3
    4904:	10c00015 	stw	r3,0(r2)
      return -1;
    4908:	00bfffc4 	movi	r2,-1
    490c:	00000606 	br	4928 <close+0xb4>
    }
    return 0;
    4910:	0005883a 	mov	r2,zero
    4914:	00000406 	br	4928 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4918:	00048240 	call	4824 <alt_get_errno>
    491c:	00c01444 	movi	r3,81
    4920:	10c00015 	stw	r3,0(r2)
    return -1;
    4924:	00bfffc4 	movi	r2,-1
  }
}
    4928:	e037883a 	mov	sp,fp
    492c:	dfc00117 	ldw	ra,4(sp)
    4930:	df000017 	ldw	fp,0(sp)
    4934:	dec00204 	addi	sp,sp,8
    4938:	f800283a 	ret

0000493c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    493c:	defffe04 	addi	sp,sp,-8
    4940:	df000115 	stw	fp,4(sp)
    4944:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4948:	e03fff15 	stw	zero,-4(fp)
    494c:	00000506 	br	4964 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    4950:	e0bfff17 	ldw	r2,-4(fp)
    4954:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4958:	e0bfff17 	ldw	r2,-4(fp)
    495c:	10800804 	addi	r2,r2,32
    4960:	e0bfff15 	stw	r2,-4(fp)
    4964:	e0bfff17 	ldw	r2,-4(fp)
    4968:	10820030 	cmpltui	r2,r2,2048
    496c:	103ff81e 	bne	r2,zero,4950 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4970:	e037883a 	mov	sp,fp
    4974:	df000017 	ldw	fp,0(sp)
    4978:	dec00104 	addi	sp,sp,4
    497c:	f800283a 	ret

00004980 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4980:	defffc04 	addi	sp,sp,-16
    4984:	df000315 	stw	fp,12(sp)
    4988:	df000304 	addi	fp,sp,12
    498c:	e13ffd15 	stw	r4,-12(fp)
    4990:	e17ffe15 	stw	r5,-8(fp)
    4994:	e1bfff15 	stw	r6,-4(fp)
  return len;
    4998:	e0bfff17 	ldw	r2,-4(fp)
}
    499c:	e037883a 	mov	sp,fp
    49a0:	df000017 	ldw	fp,0(sp)
    49a4:	dec00104 	addi	sp,sp,4
    49a8:	f800283a 	ret

000049ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    49ac:	defffe04 	addi	sp,sp,-8
    49b0:	dfc00115 	stw	ra,4(sp)
    49b4:	df000015 	stw	fp,0(sp)
    49b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    49bc:	00800034 	movhi	r2,0
    49c0:	10955d04 	addi	r2,r2,21876
    49c4:	10800017 	ldw	r2,0(r2)
    49c8:	10000526 	beq	r2,zero,49e0 <alt_get_errno+0x34>
    49cc:	00800034 	movhi	r2,0
    49d0:	10955d04 	addi	r2,r2,21876
    49d4:	10800017 	ldw	r2,0(r2)
    49d8:	103ee83a 	callr	r2
    49dc:	00000206 	br	49e8 <alt_get_errno+0x3c>
    49e0:	00800034 	movhi	r2,0
    49e4:	10961304 	addi	r2,r2,22604
}
    49e8:	e037883a 	mov	sp,fp
    49ec:	dfc00117 	ldw	ra,4(sp)
    49f0:	df000017 	ldw	fp,0(sp)
    49f4:	dec00204 	addi	sp,sp,8
    49f8:	f800283a 	ret

000049fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    49fc:	defffa04 	addi	sp,sp,-24
    4a00:	dfc00515 	stw	ra,20(sp)
    4a04:	df000415 	stw	fp,16(sp)
    4a08:	df000404 	addi	fp,sp,16
    4a0c:	e13ffe15 	stw	r4,-8(fp)
    4a10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4a14:	e0bffe17 	ldw	r2,-8(fp)
    4a18:	10000326 	beq	r2,zero,4a28 <alt_dev_llist_insert+0x2c>
    4a1c:	e0bffe17 	ldw	r2,-8(fp)
    4a20:	10800217 	ldw	r2,8(r2)
    4a24:	1000051e 	bne	r2,zero,4a3c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    4a28:	00049ac0 	call	49ac <alt_get_errno>
    4a2c:	00c00584 	movi	r3,22
    4a30:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    4a34:	00bffa84 	movi	r2,-22
    4a38:	00001306 	br	4a88 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    4a3c:	e0bffe17 	ldw	r2,-8(fp)
    4a40:	e0ffff17 	ldw	r3,-4(fp)
    4a44:	e0fffc15 	stw	r3,-16(fp)
    4a48:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4a4c:	e0bffd17 	ldw	r2,-12(fp)
    4a50:	e0fffc17 	ldw	r3,-16(fp)
    4a54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4a58:	e0bffc17 	ldw	r2,-16(fp)
    4a5c:	10c00017 	ldw	r3,0(r2)
    4a60:	e0bffd17 	ldw	r2,-12(fp)
    4a64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4a68:	e0bffc17 	ldw	r2,-16(fp)
    4a6c:	10800017 	ldw	r2,0(r2)
    4a70:	e0fffd17 	ldw	r3,-12(fp)
    4a74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4a78:	e0bffc17 	ldw	r2,-16(fp)
    4a7c:	e0fffd17 	ldw	r3,-12(fp)
    4a80:	10c00015 	stw	r3,0(r2)

  return 0;  
    4a84:	0005883a 	mov	r2,zero
}
    4a88:	e037883a 	mov	sp,fp
    4a8c:	dfc00117 	ldw	ra,4(sp)
    4a90:	df000017 	ldw	fp,0(sp)
    4a94:	dec00204 	addi	sp,sp,8
    4a98:	f800283a 	ret

00004a9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4a9c:	defffc04 	addi	sp,sp,-16
    4aa0:	df000315 	stw	fp,12(sp)
    4aa4:	df000304 	addi	fp,sp,12
    4aa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    4aac:	0001883a 	nop
    4ab0:	e0bfff17 	ldw	r2,-4(fp)
    4ab4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    4ab8:	e0bffd17 	ldw	r2,-12(fp)
    4abc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4ac0:	e0bffe17 	ldw	r2,-8(fp)
    4ac4:	10000226 	beq	r2,zero,4ad0 <_exit+0x34>
    ALT_SIM_FAIL();
    4ac8:	002af070 	cmpltui	zero,zero,43969
    4acc:	00000106 	br	4ad4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    4ad0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4ad4:	003fff06 	br	4ad4 <_exit+0x38>

00004ad8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4ad8:	defffe04 	addi	sp,sp,-8
    4adc:	dfc00115 	stw	ra,4(sp)
    4ae0:	df000015 	stw	fp,0(sp)
    4ae4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    4ae8:	0009883a 	mov	r4,zero
    4aec:	01440004 	movi	r5,4096
    4af0:	00051880 	call	5188 <alt_icache_flush>
#endif
}
    4af4:	e037883a 	mov	sp,fp
    4af8:	dfc00117 	ldw	ra,4(sp)
    4afc:	df000017 	ldw	fp,0(sp)
    4b00:	dec00204 	addi	sp,sp,8
    4b04:	f800283a 	ret

00004b08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4b08:	defff904 	addi	sp,sp,-28
    4b0c:	dfc00615 	stw	ra,24(sp)
    4b10:	df000515 	stw	fp,20(sp)
    4b14:	df000504 	addi	fp,sp,20
    4b18:	e13ffc15 	stw	r4,-16(fp)
    4b1c:	e17ffd15 	stw	r5,-12(fp)
    4b20:	e1bffe15 	stw	r6,-8(fp)
    4b24:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    4b28:	e13ffd17 	ldw	r4,-12(fp)
    4b2c:	e17ffe17 	ldw	r5,-8(fp)
    4b30:	e1bfff17 	ldw	r6,-4(fp)
    4b34:	0004d5c0 	call	4d5c <open>
    4b38:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    4b3c:	e0bffb17 	ldw	r2,-20(fp)
    4b40:	10001c16 	blt	r2,zero,4bb4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    4b44:	00c00034 	movhi	r3,0
    4b48:	18d4f604 	addi	r3,r3,21464
    4b4c:	e0bffb17 	ldw	r2,-20(fp)
    4b50:	10800324 	muli	r2,r2,12
    4b54:	1885883a 	add	r2,r3,r2
    4b58:	10c00017 	ldw	r3,0(r2)
    4b5c:	e0bffc17 	ldw	r2,-16(fp)
    4b60:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4b64:	00c00034 	movhi	r3,0
    4b68:	18d4f604 	addi	r3,r3,21464
    4b6c:	e0bffb17 	ldw	r2,-20(fp)
    4b70:	10800324 	muli	r2,r2,12
    4b74:	1885883a 	add	r2,r3,r2
    4b78:	10800104 	addi	r2,r2,4
    4b7c:	10c00017 	ldw	r3,0(r2)
    4b80:	e0bffc17 	ldw	r2,-16(fp)
    4b84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4b88:	00c00034 	movhi	r3,0
    4b8c:	18d4f604 	addi	r3,r3,21464
    4b90:	e0bffb17 	ldw	r2,-20(fp)
    4b94:	10800324 	muli	r2,r2,12
    4b98:	1885883a 	add	r2,r3,r2
    4b9c:	10800204 	addi	r2,r2,8
    4ba0:	10c00017 	ldw	r3,0(r2)
    4ba4:	e0bffc17 	ldw	r2,-16(fp)
    4ba8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4bac:	e13ffb17 	ldw	r4,-20(fp)
    4bb0:	0004eb00 	call	4eb0 <alt_release_fd>
  }
} 
    4bb4:	e037883a 	mov	sp,fp
    4bb8:	dfc00117 	ldw	ra,4(sp)
    4bbc:	df000017 	ldw	fp,0(sp)
    4bc0:	dec00204 	addi	sp,sp,8
    4bc4:	f800283a 	ret

00004bc8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4bc8:	defffb04 	addi	sp,sp,-20
    4bcc:	dfc00415 	stw	ra,16(sp)
    4bd0:	df000315 	stw	fp,12(sp)
    4bd4:	df000304 	addi	fp,sp,12
    4bd8:	e13ffd15 	stw	r4,-12(fp)
    4bdc:	e17ffe15 	stw	r5,-8(fp)
    4be0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4be4:	01000034 	movhi	r4,0
    4be8:	2114f904 	addi	r4,r4,21476
    4bec:	e17ffd17 	ldw	r5,-12(fp)
    4bf0:	01800044 	movi	r6,1
    4bf4:	01c07fc4 	movi	r7,511
    4bf8:	0004b080 	call	4b08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4bfc:	01000034 	movhi	r4,0
    4c00:	2114f604 	addi	r4,r4,21464
    4c04:	e17ffe17 	ldw	r5,-8(fp)
    4c08:	000d883a 	mov	r6,zero
    4c0c:	01c07fc4 	movi	r7,511
    4c10:	0004b080 	call	4b08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4c14:	01000034 	movhi	r4,0
    4c18:	2114fc04 	addi	r4,r4,21488
    4c1c:	e17fff17 	ldw	r5,-4(fp)
    4c20:	01800044 	movi	r6,1
    4c24:	01c07fc4 	movi	r7,511
    4c28:	0004b080 	call	4b08 <alt_open_fd>
}  
    4c2c:	e037883a 	mov	sp,fp
    4c30:	dfc00117 	ldw	ra,4(sp)
    4c34:	df000017 	ldw	fp,0(sp)
    4c38:	dec00204 	addi	sp,sp,8
    4c3c:	f800283a 	ret

00004c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4c40:	defffe04 	addi	sp,sp,-8
    4c44:	dfc00115 	stw	ra,4(sp)
    4c48:	df000015 	stw	fp,0(sp)
    4c4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4c50:	00800034 	movhi	r2,0
    4c54:	10955d04 	addi	r2,r2,21876
    4c58:	10800017 	ldw	r2,0(r2)
    4c5c:	10000526 	beq	r2,zero,4c74 <alt_get_errno+0x34>
    4c60:	00800034 	movhi	r2,0
    4c64:	10955d04 	addi	r2,r2,21876
    4c68:	10800017 	ldw	r2,0(r2)
    4c6c:	103ee83a 	callr	r2
    4c70:	00000206 	br	4c7c <alt_get_errno+0x3c>
    4c74:	00800034 	movhi	r2,0
    4c78:	10961304 	addi	r2,r2,22604
}
    4c7c:	e037883a 	mov	sp,fp
    4c80:	dfc00117 	ldw	ra,4(sp)
    4c84:	df000017 	ldw	fp,0(sp)
    4c88:	dec00204 	addi	sp,sp,8
    4c8c:	f800283a 	ret

00004c90 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4c90:	defffd04 	addi	sp,sp,-12
    4c94:	df000215 	stw	fp,8(sp)
    4c98:	df000204 	addi	fp,sp,8
    4c9c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4ca0:	e0bfff17 	ldw	r2,-4(fp)
    4ca4:	10800217 	ldw	r2,8(r2)
    4ca8:	10d00034 	orhi	r3,r2,16384
    4cac:	e0bfff17 	ldw	r2,-4(fp)
    4cb0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4cb4:	e03ffe15 	stw	zero,-8(fp)
    4cb8:	00001d06 	br	4d30 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4cbc:	00c00034 	movhi	r3,0
    4cc0:	18d4f604 	addi	r3,r3,21464
    4cc4:	e0bffe17 	ldw	r2,-8(fp)
    4cc8:	10800324 	muli	r2,r2,12
    4ccc:	1885883a 	add	r2,r3,r2
    4cd0:	10c00017 	ldw	r3,0(r2)
    4cd4:	e0bfff17 	ldw	r2,-4(fp)
    4cd8:	10800017 	ldw	r2,0(r2)
    4cdc:	1880111e 	bne	r3,r2,4d24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4ce0:	00c00034 	movhi	r3,0
    4ce4:	18d4f604 	addi	r3,r3,21464
    4ce8:	e0bffe17 	ldw	r2,-8(fp)
    4cec:	10800324 	muli	r2,r2,12
    4cf0:	1885883a 	add	r2,r3,r2
    4cf4:	10800204 	addi	r2,r2,8
    4cf8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4cfc:	1000090e 	bge	r2,zero,4d24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    4d00:	e0bffe17 	ldw	r2,-8(fp)
    4d04:	10c00324 	muli	r3,r2,12
    4d08:	00800034 	movhi	r2,0
    4d0c:	1094f604 	addi	r2,r2,21464
    4d10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4d14:	e0bfff17 	ldw	r2,-4(fp)
    4d18:	18800226 	beq	r3,r2,4d24 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4d1c:	00bffcc4 	movi	r2,-13
    4d20:	00000a06 	br	4d4c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4d24:	e0bffe17 	ldw	r2,-8(fp)
    4d28:	10800044 	addi	r2,r2,1
    4d2c:	e0bffe15 	stw	r2,-8(fp)
    4d30:	00800034 	movhi	r2,0
    4d34:	10955c04 	addi	r2,r2,21872
    4d38:	10800017 	ldw	r2,0(r2)
    4d3c:	1007883a 	mov	r3,r2
    4d40:	e0bffe17 	ldw	r2,-8(fp)
    4d44:	18bfdd2e 	bgeu	r3,r2,4cbc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4d48:	0005883a 	mov	r2,zero
}
    4d4c:	e037883a 	mov	sp,fp
    4d50:	df000017 	ldw	fp,0(sp)
    4d54:	dec00104 	addi	sp,sp,4
    4d58:	f800283a 	ret

00004d5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4d5c:	defff604 	addi	sp,sp,-40
    4d60:	dfc00915 	stw	ra,36(sp)
    4d64:	df000815 	stw	fp,32(sp)
    4d68:	df000804 	addi	fp,sp,32
    4d6c:	e13ffd15 	stw	r4,-12(fp)
    4d70:	e17ffe15 	stw	r5,-8(fp)
    4d74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4d78:	00bfffc4 	movi	r2,-1
    4d7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4d80:	00bffb44 	movi	r2,-19
    4d84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    4d88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4d8c:	e13ffd17 	ldw	r4,-12(fp)
    4d90:	01400034 	movhi	r5,0
    4d94:	29555a04 	addi	r5,r5,21864
    4d98:	0004f300 	call	4f30 <alt_find_dev>
    4d9c:	e0bff815 	stw	r2,-32(fp)
    4da0:	e0bff817 	ldw	r2,-32(fp)
    4da4:	1000051e 	bne	r2,zero,4dbc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4da8:	e13ffd17 	ldw	r4,-12(fp)
    4dac:	0004fc00 	call	4fc0 <alt_find_file>
    4db0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    4db4:	00800044 	movi	r2,1
    4db8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4dbc:	e0bff817 	ldw	r2,-32(fp)
    4dc0:	10002926 	beq	r2,zero,4e68 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4dc4:	e13ff817 	ldw	r4,-32(fp)
    4dc8:	00050d40 	call	50d4 <alt_get_fd>
    4dcc:	e0bff915 	stw	r2,-28(fp)
    4dd0:	e0bff917 	ldw	r2,-28(fp)
    4dd4:	1000030e 	bge	r2,zero,4de4 <open+0x88>
    {
      status = index;
    4dd8:	e0bff917 	ldw	r2,-28(fp)
    4ddc:	e0bffa15 	stw	r2,-24(fp)
    4de0:	00002306 	br	4e70 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    4de4:	e0bff917 	ldw	r2,-28(fp)
    4de8:	10c00324 	muli	r3,r2,12
    4dec:	00800034 	movhi	r2,0
    4df0:	1094f604 	addi	r2,r2,21464
    4df4:	1885883a 	add	r2,r3,r2
    4df8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4dfc:	e0fffe17 	ldw	r3,-8(fp)
    4e00:	00900034 	movhi	r2,16384
    4e04:	10bfffc4 	addi	r2,r2,-1
    4e08:	1886703a 	and	r3,r3,r2
    4e0c:	e0bffc17 	ldw	r2,-16(fp)
    4e10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4e14:	e0bffb17 	ldw	r2,-20(fp)
    4e18:	1000051e 	bne	r2,zero,4e30 <open+0xd4>
    4e1c:	e13ffc17 	ldw	r4,-16(fp)
    4e20:	0004c900 	call	4c90 <alt_file_locked>
    4e24:	e0bffa15 	stw	r2,-24(fp)
    4e28:	e0bffa17 	ldw	r2,-24(fp)
    4e2c:	10001016 	blt	r2,zero,4e70 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4e30:	e0bff817 	ldw	r2,-32(fp)
    4e34:	10800317 	ldw	r2,12(r2)
    4e38:	10000826 	beq	r2,zero,4e5c <open+0x100>
    4e3c:	e0bff817 	ldw	r2,-32(fp)
    4e40:	10800317 	ldw	r2,12(r2)
    4e44:	e13ffc17 	ldw	r4,-16(fp)
    4e48:	e17ffd17 	ldw	r5,-12(fp)
    4e4c:	e1bffe17 	ldw	r6,-8(fp)
    4e50:	e1ffff17 	ldw	r7,-4(fp)
    4e54:	103ee83a 	callr	r2
    4e58:	00000106 	br	4e60 <open+0x104>
    4e5c:	0005883a 	mov	r2,zero
    4e60:	e0bffa15 	stw	r2,-24(fp)
    4e64:	00000206 	br	4e70 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4e68:	00bffb44 	movi	r2,-19
    4e6c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4e70:	e0bffa17 	ldw	r2,-24(fp)
    4e74:	1000080e 	bge	r2,zero,4e98 <open+0x13c>
  {
    alt_release_fd (index);  
    4e78:	e13ff917 	ldw	r4,-28(fp)
    4e7c:	0004eb00 	call	4eb0 <alt_release_fd>
    ALT_ERRNO = -status;
    4e80:	0004c400 	call	4c40 <alt_get_errno>
    4e84:	e0fffa17 	ldw	r3,-24(fp)
    4e88:	00c7c83a 	sub	r3,zero,r3
    4e8c:	10c00015 	stw	r3,0(r2)
    return -1;
    4e90:	00bfffc4 	movi	r2,-1
    4e94:	00000106 	br	4e9c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    4e98:	e0bff917 	ldw	r2,-28(fp)
}
    4e9c:	e037883a 	mov	sp,fp
    4ea0:	dfc00117 	ldw	ra,4(sp)
    4ea4:	df000017 	ldw	fp,0(sp)
    4ea8:	dec00204 	addi	sp,sp,8
    4eac:	f800283a 	ret

00004eb0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4eb0:	defffe04 	addi	sp,sp,-8
    4eb4:	df000115 	stw	fp,4(sp)
    4eb8:	df000104 	addi	fp,sp,4
    4ebc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    4ec0:	e0bfff17 	ldw	r2,-4(fp)
    4ec4:	108000d0 	cmplti	r2,r2,3
    4ec8:	10000d1e 	bne	r2,zero,4f00 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    4ecc:	00c00034 	movhi	r3,0
    4ed0:	18d4f604 	addi	r3,r3,21464
    4ed4:	e0bfff17 	ldw	r2,-4(fp)
    4ed8:	10800324 	muli	r2,r2,12
    4edc:	1885883a 	add	r2,r3,r2
    4ee0:	10800204 	addi	r2,r2,8
    4ee4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4ee8:	00c00034 	movhi	r3,0
    4eec:	18d4f604 	addi	r3,r3,21464
    4ef0:	e0bfff17 	ldw	r2,-4(fp)
    4ef4:	10800324 	muli	r2,r2,12
    4ef8:	1885883a 	add	r2,r3,r2
    4efc:	10000015 	stw	zero,0(r2)
  }
}
    4f00:	e037883a 	mov	sp,fp
    4f04:	df000017 	ldw	fp,0(sp)
    4f08:	dec00104 	addi	sp,sp,4
    4f0c:	f800283a 	ret

00004f10 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    4f10:	deffff04 	addi	sp,sp,-4
    4f14:	df000015 	stw	fp,0(sp)
    4f18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    4f1c:	000170fa 	wrctl	ienable,zero
}
    4f20:	e037883a 	mov	sp,fp
    4f24:	df000017 	ldw	fp,0(sp)
    4f28:	dec00104 	addi	sp,sp,4
    4f2c:	f800283a 	ret

00004f30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4f30:	defffa04 	addi	sp,sp,-24
    4f34:	dfc00515 	stw	ra,20(sp)
    4f38:	df000415 	stw	fp,16(sp)
    4f3c:	df000404 	addi	fp,sp,16
    4f40:	e13ffe15 	stw	r4,-8(fp)
    4f44:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4f48:	e0bfff17 	ldw	r2,-4(fp)
    4f4c:	10800017 	ldw	r2,0(r2)
    4f50:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4f54:	e13ffe17 	ldw	r4,-8(fp)
    4f58:	00041340 	call	4134 <strlen>
    4f5c:	10800044 	addi	r2,r2,1
    4f60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4f64:	00000d06 	br	4f9c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4f68:	e0bffc17 	ldw	r2,-16(fp)
    4f6c:	10c00217 	ldw	r3,8(r2)
    4f70:	e0bffd17 	ldw	r2,-12(fp)
    4f74:	1809883a 	mov	r4,r3
    4f78:	e17ffe17 	ldw	r5,-8(fp)
    4f7c:	100d883a 	mov	r6,r2
    4f80:	00052140 	call	5214 <memcmp>
    4f84:	1000021e 	bne	r2,zero,4f90 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4f88:	e0bffc17 	ldw	r2,-16(fp)
    4f8c:	00000706 	br	4fac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4f90:	e0bffc17 	ldw	r2,-16(fp)
    4f94:	10800017 	ldw	r2,0(r2)
    4f98:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4f9c:	e0fffc17 	ldw	r3,-16(fp)
    4fa0:	e0bfff17 	ldw	r2,-4(fp)
    4fa4:	18bff01e 	bne	r3,r2,4f68 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    4fa8:	0005883a 	mov	r2,zero
}
    4fac:	e037883a 	mov	sp,fp
    4fb0:	dfc00117 	ldw	ra,4(sp)
    4fb4:	df000017 	ldw	fp,0(sp)
    4fb8:	dec00204 	addi	sp,sp,8
    4fbc:	f800283a 	ret

00004fc0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4fc0:	defffb04 	addi	sp,sp,-20
    4fc4:	dfc00415 	stw	ra,16(sp)
    4fc8:	df000315 	stw	fp,12(sp)
    4fcc:	df000304 	addi	fp,sp,12
    4fd0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4fd4:	00800034 	movhi	r2,0
    4fd8:	10955804 	addi	r2,r2,21856
    4fdc:	10800017 	ldw	r2,0(r2)
    4fe0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4fe4:	00003106 	br	50ac <alt_find_file+0xec>
  {
    len = strlen(next->name);
    4fe8:	e0bffd17 	ldw	r2,-12(fp)
    4fec:	10800217 	ldw	r2,8(r2)
    4ff0:	1009883a 	mov	r4,r2
    4ff4:	00041340 	call	4134 <strlen>
    4ff8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    4ffc:	e0bffd17 	ldw	r2,-12(fp)
    5000:	10c00217 	ldw	r3,8(r2)
    5004:	e0bffe17 	ldw	r2,-8(fp)
    5008:	10bfffc4 	addi	r2,r2,-1
    500c:	1885883a 	add	r2,r3,r2
    5010:	10800003 	ldbu	r2,0(r2)
    5014:	10803fcc 	andi	r2,r2,255
    5018:	1080201c 	xori	r2,r2,128
    501c:	10bfe004 	addi	r2,r2,-128
    5020:	10800bd8 	cmpnei	r2,r2,47
    5024:	1000031e 	bne	r2,zero,5034 <alt_find_file+0x74>
    {
      len -= 1;
    5028:	e0bffe17 	ldw	r2,-8(fp)
    502c:	10bfffc4 	addi	r2,r2,-1
    5030:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5034:	e0bffe17 	ldw	r2,-8(fp)
    5038:	e0ffff17 	ldw	r3,-4(fp)
    503c:	1885883a 	add	r2,r3,r2
    5040:	10800003 	ldbu	r2,0(r2)
    5044:	10803fcc 	andi	r2,r2,255
    5048:	1080201c 	xori	r2,r2,128
    504c:	10bfe004 	addi	r2,r2,-128
    5050:	10800be0 	cmpeqi	r2,r2,47
    5054:	1000081e 	bne	r2,zero,5078 <alt_find_file+0xb8>
    5058:	e0bffe17 	ldw	r2,-8(fp)
    505c:	e0ffff17 	ldw	r3,-4(fp)
    5060:	1885883a 	add	r2,r3,r2
    5064:	10800003 	ldbu	r2,0(r2)
    5068:	10803fcc 	andi	r2,r2,255
    506c:	1080201c 	xori	r2,r2,128
    5070:	10bfe004 	addi	r2,r2,-128
    5074:	10000a1e 	bne	r2,zero,50a0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    5078:	e0bffd17 	ldw	r2,-12(fp)
    507c:	10c00217 	ldw	r3,8(r2)
    5080:	e0bffe17 	ldw	r2,-8(fp)
    5084:	1809883a 	mov	r4,r3
    5088:	e17fff17 	ldw	r5,-4(fp)
    508c:	100d883a 	mov	r6,r2
    5090:	00052140 	call	5214 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5094:	1000021e 	bne	r2,zero,50a0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5098:	e0bffd17 	ldw	r2,-12(fp)
    509c:	00000806 	br	50c0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    50a0:	e0bffd17 	ldw	r2,-12(fp)
    50a4:	10800017 	ldw	r2,0(r2)
    50a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    50ac:	e0fffd17 	ldw	r3,-12(fp)
    50b0:	00800034 	movhi	r2,0
    50b4:	10955804 	addi	r2,r2,21856
    50b8:	18bfcb1e 	bne	r3,r2,4fe8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    50bc:	0005883a 	mov	r2,zero
}
    50c0:	e037883a 	mov	sp,fp
    50c4:	dfc00117 	ldw	ra,4(sp)
    50c8:	df000017 	ldw	fp,0(sp)
    50cc:	dec00204 	addi	sp,sp,8
    50d0:	f800283a 	ret

000050d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    50d4:	defffc04 	addi	sp,sp,-16
    50d8:	df000315 	stw	fp,12(sp)
    50dc:	df000304 	addi	fp,sp,12
    50e0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    50e4:	00bffa04 	movi	r2,-24
    50e8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    50ec:	e03ffd15 	stw	zero,-12(fp)
    50f0:	00001d06 	br	5168 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    50f4:	00c00034 	movhi	r3,0
    50f8:	18d4f604 	addi	r3,r3,21464
    50fc:	e0bffd17 	ldw	r2,-12(fp)
    5100:	10800324 	muli	r2,r2,12
    5104:	1885883a 	add	r2,r3,r2
    5108:	10800017 	ldw	r2,0(r2)
    510c:	1000131e 	bne	r2,zero,515c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    5110:	00c00034 	movhi	r3,0
    5114:	18d4f604 	addi	r3,r3,21464
    5118:	e0bffd17 	ldw	r2,-12(fp)
    511c:	10800324 	muli	r2,r2,12
    5120:	1885883a 	add	r2,r3,r2
    5124:	e0ffff17 	ldw	r3,-4(fp)
    5128:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    512c:	00800034 	movhi	r2,0
    5130:	10955c04 	addi	r2,r2,21872
    5134:	10c00017 	ldw	r3,0(r2)
    5138:	e0bffd17 	ldw	r2,-12(fp)
    513c:	1880040e 	bge	r3,r2,5150 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    5140:	00800034 	movhi	r2,0
    5144:	10955c04 	addi	r2,r2,21872
    5148:	e0fffd17 	ldw	r3,-12(fp)
    514c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    5150:	e0bffd17 	ldw	r2,-12(fp)
    5154:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    5158:	00000606 	br	5174 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    515c:	e0bffd17 	ldw	r2,-12(fp)
    5160:	10800044 	addi	r2,r2,1
    5164:	e0bffd15 	stw	r2,-12(fp)
    5168:	e0bffd17 	ldw	r2,-12(fp)
    516c:	10800810 	cmplti	r2,r2,32
    5170:	103fe01e 	bne	r2,zero,50f4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5174:	e0bffe17 	ldw	r2,-8(fp)
}
    5178:	e037883a 	mov	sp,fp
    517c:	df000017 	ldw	fp,0(sp)
    5180:	dec00104 	addi	sp,sp,4
    5184:	f800283a 	ret

00005188 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    5188:	defffb04 	addi	sp,sp,-20
    518c:	df000415 	stw	fp,16(sp)
    5190:	df000404 	addi	fp,sp,16
    5194:	e13ffe15 	stw	r4,-8(fp)
    5198:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    519c:	e0bfff17 	ldw	r2,-4(fp)
    51a0:	10840070 	cmpltui	r2,r2,4097
    51a4:	1000021e 	bne	r2,zero,51b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    51a8:	00840004 	movi	r2,4096
    51ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    51b0:	e0fffe17 	ldw	r3,-8(fp)
    51b4:	e0bfff17 	ldw	r2,-4(fp)
    51b8:	1885883a 	add	r2,r3,r2
    51bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    51c0:	e0bffe17 	ldw	r2,-8(fp)
    51c4:	e0bffc15 	stw	r2,-16(fp)
    51c8:	00000506 	br	51e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    51cc:	e0bffc17 	ldw	r2,-16(fp)
    51d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    51d4:	e0bffc17 	ldw	r2,-16(fp)
    51d8:	10800804 	addi	r2,r2,32
    51dc:	e0bffc15 	stw	r2,-16(fp)
    51e0:	e0fffc17 	ldw	r3,-16(fp)
    51e4:	e0bffd17 	ldw	r2,-12(fp)
    51e8:	18bff836 	bltu	r3,r2,51cc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    51ec:	e0bffe17 	ldw	r2,-8(fp)
    51f0:	108007cc 	andi	r2,r2,31
    51f4:	10000226 	beq	r2,zero,5200 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    51f8:	e0bffc17 	ldw	r2,-16(fp)
    51fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    5200:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    5204:	e037883a 	mov	sp,fp
    5208:	df000017 	ldw	fp,0(sp)
    520c:	dec00104 	addi	sp,sp,4
    5210:	f800283a 	ret

00005214 <memcmp>:
    5214:	30000d26 	beq	r6,zero,524c <memcmp+0x38>
    5218:	20c00003 	ldbu	r3,0(r4)
    521c:	28800003 	ldbu	r2,0(r5)
    5220:	18800c1e 	bne	r3,r2,5254 <memcmp+0x40>
    5224:	31bfff84 	addi	r6,r6,-2
    5228:	01ffffc4 	movi	r7,-1
    522c:	00000406 	br	5240 <memcmp+0x2c>
    5230:	20c00003 	ldbu	r3,0(r4)
    5234:	28800003 	ldbu	r2,0(r5)
    5238:	31bfffc4 	addi	r6,r6,-1
    523c:	1880051e 	bne	r3,r2,5254 <memcmp+0x40>
    5240:	21000044 	addi	r4,r4,1
    5244:	29400044 	addi	r5,r5,1
    5248:	31fff91e 	bne	r6,r7,5230 <memcmp+0x1c>
    524c:	0005883a 	mov	r2,zero
    5250:	f800283a 	ret
    5254:	1885c83a 	sub	r2,r3,r2
    5258:	f800283a 	ret
