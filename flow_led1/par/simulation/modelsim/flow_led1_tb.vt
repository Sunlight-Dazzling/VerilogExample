// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/25/2021 15:37:58"
                                                                                
// Verilog Test Bench template for design : flow_led1
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module flow_led1_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg sys_clk;
reg sys_rst_n;
// wires                                               
wire [3:0]  led;

// assign statements (if any)                          
flow_led1 i1 (
// port map - connection between master ports and signals/registers   
	.led(led),
	.sys_clk(sys_clk),
	.sys_rst_n(sys_rst_n)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
	sys_clk = 1'b0;
	sys_rst_n = 1'b0; // 复位
	#100 sys_rst_n = 1'b1; // 在第100ns的时候复位信号拉高
	#1000 $stop;                                                    
// --> end                    
end                                                     
always #10 sys_clk = ~sys_clk;                                              
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
//例化flow_led模块
flow_led u0_flow_led (
	 .sys_clk (sys_clk ),
	 .sys_rst_n (sys_rst_n),
	 .led (led )
	); 
	 
endmodule

