
flow_led.elf:     file format elf32-littlenios2
flow_led.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000f98 memsz 0x00000f98 flags r-x
    LOAD off    0x00001fb8 vaddr 0x00004fb8 paddr 0x000051a8 align 2**12
         filesz 0x000001f0 memsz 0x000001f0 flags rw-
    LOAD off    0x00002398 vaddr 0x00005398 paddr 0x00005398 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000f64  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  00004f84  00004f84  00001f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000001f0  00004fb8  000051a8  00001fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00005398  00005398  00002398  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000021d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003466  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012d3  00000000  00000000  0000596e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014d6  00000000  00000000  00006c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004d8  00000000  00000000  00008118  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a8b  00000000  00000000  000085f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005c0  00000000  00000000  0000907b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000030  00000000  00000000  0000963c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  00009670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000a956  2**0
                  CONTENTS, READONLY
 16 .cpu          00000005  00000000  00000000  0000a959  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000a95e  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000a95f  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0000a960  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0000a964  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000a968  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000a96c  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0000a977  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000a982  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0000a98d  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000018  00000000  00000000  0000a998  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000317c2  00000000  00000000  0000a9b0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
00004f84 l    d  .rodata	00000000 .rodata
00004fb8 l    d  .rwdata	00000000 .rwdata
00005398 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../flow_led_bsp//obj/HAL/src/crt0.o
00004068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000040e4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004238 l     F .text	00000038 alt_dev_reg
00004fb8 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00004524 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004680 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000046ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004808 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00004940 l     F .text	00000050 alt_get_errno
00004990 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
000041d0 g     F .text	00000068 alt_main
000051a8 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000001c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000053a4 g     O .bss	00000004 errno
0000539c g     O .bss	00000004 alt_argv
0000d18c g       *ABS*	00000000 _gp
0000500c g     O .rwdata	00000180 alt_fd_list
00004c30 g     F .text	00000090 alt_find_dev
000048c8 g     F .text	00000078 alt_io_redirect
00004398 g     F .text	000000f4 altera_avalon_jtag_uart_read
00004e88 g     F .text	0000008c alt_icache_flush
00004000 g       *ABS*	00000000 __alt_mem_ram
000051a0 g     O .rwdata	00000004 alt_max_fd
000053a8 g       *ABS*	00000000 __bss_end
00004fe4 g     O .rwdata	00000028 alt_dev_null
0000463c g     F .text	00000044 alt_dcache_flush_all
000051a8 g       *ABS*	00000000 __ram_rwdata_end
00005198 g     O .rwdata	00000008 alt_dev_list
00004fb8 g       *ABS*	00000000 __ram_rodata_end
000053a8 g       *ABS*	00000000 end
00006800 g       *ABS*	00000000 __alt_stack_pointer
0000518c g     O .rwdata	00000004 led_data
0000448c g     F .text	00000098 altera_avalon_jtag_uart_write
00004020 g     F .text	0000004c _start
000042a4 g     F .text	00000034 alt_sys_init
00004fb8 g       *ABS*	00000000 __ram_rwdata_start
00004f84 g       *ABS*	00000000 __ram_rodata_start
000042d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00004dd4 g     F .text	000000b4 alt_get_fd
00004f14 g     F .text	00000048 memcmp
000053a8 g       *ABS*	00000000 __alt_stack_base
00004cc0 g     F .text	00000114 alt_find_file
000046fc g     F .text	000000a0 alt_dev_llist_insert
00005398 g       *ABS*	00000000 __bss_start
0000406c g     F .text	00000078 main
000053a0 g     O .bss	00000004 alt_envp
00004338 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000051a4 g     O .rwdata	00000004 alt_errno
00004f84 g       *ABS*	00000000 __flash_rodata_start
00004270 g     F .text	00000034 alt_irq_init
00004bb0 g     F .text	00000060 alt_release_fd
00005398 g     O .bss	00000004 alt_argc
00005190 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000051a8 g       *ABS*	00000000 _edata
000053a8 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004c10 g     F .text	00000020 altera_nios2_qsys_irq_init
00006800 g       *ABS*	00000000 __alt_data_end
0000479c g     F .text	0000003c _exit
00004f5c g     F .text	00000028 strlen
00004a5c g     F .text	00000154 open
000047d8 g     F .text	00000030 alt_icache_flush_all
00004574 g     F .text	000000c8 close
00004150 g     F .text	00000080 alt_load



Disassembly of section .entry:

00004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    4000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    4004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    4008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    400c:	00bffd16 	blt	zero,r2,4004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4014:	08500814 	ori	at,at,16416
    jmp r1
    4018:	0800683a 	jmp	at
    401c:	00000000 	call	0 <__alt_mem_ram-0x4000>

Disassembly of section .text:

00004020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    4020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    4024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    4028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    402c:	00bffd16 	blt	zero,r2,4024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4034:	deda0014 	ori	sp,sp,26624
    movhi gp, %hi(_gp)
    4038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    403c:	d6b46314 	ori	gp,gp,53644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4044:	1094e614 	ori	r2,r2,21400

    movhi r3, %hi(__bss_end)
    4048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    404c:	18d4ea14 	ori	r3,r3,21416

    beq r2, r3, 1f
    4050:	10c00326 	beq	r2,r3,4060 <_start+0x40>

0:
    stw zero, (r2)
    4054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    405c:	10fffd36 	bltu	r2,r3,4054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4060:	00041500 	call	4150 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4064:	00041d00 	call	41d0 <alt_main>

00004068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4068:	003fff06 	br	4068 <alt_after_alt_main>

0000406c <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"
const alt_u8
led_data[4]={0x01,0x03,0x07,0x0F};
int main (void) {
    406c:	defffc04 	addi	sp,sp,-16
    4070:	df000315 	stw	fp,12(sp)
    4074:	df000304 	addi	fp,sp,12
 int count=0;
    4078:	e03ffd15 	stw	zero,-12(fp)
 alt_u8 led;
 volatile int i;
 while (1)
  {
 	 if (count==4)
    407c:	e0bffd17 	ldw	r2,-12(fp)
    4080:	10800118 	cmpnei	r2,r2,4
    4084:	1000021e 	bne	r2,zero,4090 <main+0x24>
 	 {
 		 count=0;
    4088:	e03ffd15 	stw	zero,-12(fp)
    408c:	00000306 	br	409c <main+0x30>
 	 }
 	 else
 	 {
 		 count++;
    4090:	e0bffd17 	ldw	r2,-12(fp)
    4094:	10800044 	addi	r2,r2,1
    4098:	e0bffd15 	stw	r2,-12(fp)
 	 }
 	 led=led_data[count];
    409c:	e0fffd17 	ldw	r3,-12(fp)
    40a0:	d0a00004 	addi	r2,gp,-32768
    40a4:	1885883a 	add	r2,r3,r2
    40a8:	10800003 	ldbu	r2,0(r2)
    40ac:	e0bffe05 	stb	r2,-8(fp)
 	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, led);
    40b0:	e0fffe03 	ldbu	r3,-8(fp)
    40b4:	00a40014 	movui	r2,36864
    40b8:	10c00035 	stwio	r3,0(r2)
 	 i = 0;
    40bc:	e03fff15 	stw	zero,-4(fp)
 	 while (i<5000000)
    40c0:	00000306 	br	40d0 <main+0x64>
 		 i++;
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10800044 	addi	r2,r2,1
    40cc:	e0bfff15 	stw	r2,-4(fp)
 		 count++;
 	 }
 	 led=led_data[count];
 	 IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, led);
 	 i = 0;
 	 while (i<5000000)
    40d0:	e0bfff17 	ldw	r2,-4(fp)
    40d4:	00c01334 	movhi	r3,76
    40d8:	18d2cfc4 	addi	r3,r3,19263
    40dc:	18bff90e 	bge	r3,r2,40c4 <main+0x58>
 		 i++;
   }
    40e0:	003fe606 	br	407c <main+0x10>

000040e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    40e4:	defffc04 	addi	sp,sp,-16
    40e8:	df000315 	stw	fp,12(sp)
    40ec:	df000304 	addi	fp,sp,12
    40f0:	e13ffd15 	stw	r4,-12(fp)
    40f4:	e17ffe15 	stw	r5,-8(fp)
    40f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    40fc:	e0fffe17 	ldw	r3,-8(fp)
    4100:	e0bffd17 	ldw	r2,-12(fp)
    4104:	18800e26 	beq	r3,r2,4140 <alt_load_section+0x5c>
  {
    while( to != end )
    4108:	00000a06 	br	4134 <alt_load_section+0x50>
    {
      *to++ = *from++;
    410c:	e0bffd17 	ldw	r2,-12(fp)
    4110:	10c00017 	ldw	r3,0(r2)
    4114:	e0bffe17 	ldw	r2,-8(fp)
    4118:	10c00015 	stw	r3,0(r2)
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	10800104 	addi	r2,r2,4
    4124:	e0bffe15 	stw	r2,-8(fp)
    4128:	e0bffd17 	ldw	r2,-12(fp)
    412c:	10800104 	addi	r2,r2,4
    4130:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4134:	e0fffe17 	ldw	r3,-8(fp)
    4138:	e0bfff17 	ldw	r2,-4(fp)
    413c:	18bff31e 	bne	r3,r2,410c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    4140:	e037883a 	mov	sp,fp
    4144:	df000017 	ldw	fp,0(sp)
    4148:	dec00104 	addi	sp,sp,4
    414c:	f800283a 	ret

00004150 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4150:	defffe04 	addi	sp,sp,-8
    4154:	dfc00115 	stw	ra,4(sp)
    4158:	df000015 	stw	fp,0(sp)
    415c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4160:	01000034 	movhi	r4,0
    4164:	21146a04 	addi	r4,r4,20904
    4168:	01400034 	movhi	r5,0
    416c:	2953ee04 	addi	r5,r5,20408
    4170:	01800034 	movhi	r6,0
    4174:	31946a04 	addi	r6,r6,20904
    4178:	00040e40 	call	40e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    417c:	01000034 	movhi	r4,0
    4180:	21100804 	addi	r4,r4,16416
    4184:	01400034 	movhi	r5,0
    4188:	29500804 	addi	r5,r5,16416
    418c:	01800034 	movhi	r6,0
    4190:	31900804 	addi	r6,r6,16416
    4194:	00040e40 	call	40e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4198:	01000034 	movhi	r4,0
    419c:	2113e104 	addi	r4,r4,20356
    41a0:	01400034 	movhi	r5,0
    41a4:	2953e104 	addi	r5,r5,20356
    41a8:	01800034 	movhi	r6,0
    41ac:	3193ee04 	addi	r6,r6,20408
    41b0:	00040e40 	call	40e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    41b4:	000463c0 	call	463c <alt_dcache_flush_all>
  alt_icache_flush_all();
    41b8:	00047d80 	call	47d8 <alt_icache_flush_all>
}
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    41d0:	defffd04 	addi	sp,sp,-12
    41d4:	dfc00215 	stw	ra,8(sp)
    41d8:	df000115 	stw	fp,4(sp)
    41dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    41e0:	0009883a 	mov	r4,zero
    41e4:	00042700 	call	4270 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    41e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    41ec:	00042a40 	call	42a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    41f0:	01000034 	movhi	r4,0
    41f4:	2113e104 	addi	r4,r4,20356
    41f8:	01400034 	movhi	r5,0
    41fc:	2953e104 	addi	r5,r5,20356
    4200:	01800034 	movhi	r6,0
    4204:	3193e104 	addi	r6,r6,20356
    4208:	00048c80 	call	48c8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    420c:	d1208317 	ldw	r4,-32244(gp)
    4210:	d0e08417 	ldw	r3,-32240(gp)
    4214:	d0a08517 	ldw	r2,-32236(gp)
    4218:	180b883a 	mov	r5,r3
    421c:	100d883a 	mov	r6,r2
    4220:	000406c0 	call	406c <main>
    4224:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    4228:	01000044 	movi	r4,1
    422c:	00045740 	call	4574 <close>
  exit (result);
    4230:	e13fff17 	ldw	r4,-4(fp)
    4234:	000479c0 	call	479c <_exit>

00004238 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4238:	defffd04 	addi	sp,sp,-12
    423c:	dfc00215 	stw	ra,8(sp)
    4240:	df000115 	stw	fp,4(sp)
    4244:	df000104 	addi	fp,sp,4
    4248:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    424c:	e13fff17 	ldw	r4,-4(fp)
    4250:	01400034 	movhi	r5,0
    4254:	29546604 	addi	r5,r5,20888
    4258:	00046fc0 	call	46fc <alt_dev_llist_insert>
}
    425c:	e037883a 	mov	sp,fp
    4260:	dfc00117 	ldw	ra,4(sp)
    4264:	df000017 	ldw	fp,0(sp)
    4268:	dec00204 	addi	sp,sp,8
    426c:	f800283a 	ret

00004270 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4270:	defffd04 	addi	sp,sp,-12
    4274:	dfc00215 	stw	ra,8(sp)
    4278:	df000115 	stw	fp,4(sp)
    427c:	df000104 	addi	fp,sp,4
    4280:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    4284:	0004c100 	call	4c10 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4288:	00800044 	movi	r2,1
    428c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4290:	e037883a 	mov	sp,fp
    4294:	dfc00117 	ldw	ra,4(sp)
    4298:	df000017 	ldw	fp,0(sp)
    429c:	dec00204 	addi	sp,sp,8
    42a0:	f800283a 	ret

000042a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    42a4:	defffe04 	addi	sp,sp,-8
    42a8:	dfc00115 	stw	ra,4(sp)
    42ac:	df000015 	stw	fp,0(sp)
    42b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    42b4:	01000034 	movhi	r4,0
    42b8:	2113ee04 	addi	r4,r4,20408
    42bc:	00042380 	call	4238 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    42c0:	0001883a 	nop
}
    42c4:	e037883a 	mov	sp,fp
    42c8:	dfc00117 	ldw	ra,4(sp)
    42cc:	df000017 	ldw	fp,0(sp)
    42d0:	dec00204 	addi	sp,sp,8
    42d4:	f800283a 	ret

000042d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    42d8:	defffa04 	addi	sp,sp,-24
    42dc:	dfc00515 	stw	ra,20(sp)
    42e0:	df000415 	stw	fp,16(sp)
    42e4:	df000404 	addi	fp,sp,16
    42e8:	e13ffd15 	stw	r4,-12(fp)
    42ec:	e17ffe15 	stw	r5,-8(fp)
    42f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    42f4:	e0bffd17 	ldw	r2,-12(fp)
    42f8:	10800017 	ldw	r2,0(r2)
    42fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4300:	e0bffc17 	ldw	r2,-16(fp)
    4304:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    4308:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    430c:	10800217 	ldw	r2,8(r2)
    4310:	1809883a 	mov	r4,r3
    4314:	e17ffe17 	ldw	r5,-8(fp)
    4318:	e1bfff17 	ldw	r6,-4(fp)
    431c:	100f883a 	mov	r7,r2
    4320:	00043980 	call	4398 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4324:	e037883a 	mov	sp,fp
    4328:	dfc00117 	ldw	ra,4(sp)
    432c:	df000017 	ldw	fp,0(sp)
    4330:	dec00204 	addi	sp,sp,8
    4334:	f800283a 	ret

00004338 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4338:	defffa04 	addi	sp,sp,-24
    433c:	dfc00515 	stw	ra,20(sp)
    4340:	df000415 	stw	fp,16(sp)
    4344:	df000404 	addi	fp,sp,16
    4348:	e13ffd15 	stw	r4,-12(fp)
    434c:	e17ffe15 	stw	r5,-8(fp)
    4350:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4354:	e0bffd17 	ldw	r2,-12(fp)
    4358:	10800017 	ldw	r2,0(r2)
    435c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4360:	e0bffc17 	ldw	r2,-16(fp)
    4364:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    4368:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    436c:	10800217 	ldw	r2,8(r2)
    4370:	1809883a 	mov	r4,r3
    4374:	e17ffe17 	ldw	r5,-8(fp)
    4378:	e1bfff17 	ldw	r6,-4(fp)
    437c:	100f883a 	mov	r7,r2
    4380:	000448c0 	call	448c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    4384:	e037883a 	mov	sp,fp
    4388:	dfc00117 	ldw	ra,4(sp)
    438c:	df000017 	ldw	fp,0(sp)
    4390:	dec00204 	addi	sp,sp,8
    4394:	f800283a 	ret

00004398 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    4398:	defff704 	addi	sp,sp,-36
    439c:	df000815 	stw	fp,32(sp)
    43a0:	df000804 	addi	fp,sp,32
    43a4:	e13ffc15 	stw	r4,-16(fp)
    43a8:	e17ffd15 	stw	r5,-12(fp)
    43ac:	e1bffe15 	stw	r6,-8(fp)
    43b0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    43b4:	e0bffc17 	ldw	r2,-16(fp)
    43b8:	10800017 	ldw	r2,0(r2)
    43bc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    43c0:	e0bffd17 	ldw	r2,-12(fp)
    43c4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    43c8:	e0bffe17 	ldw	r2,-8(fp)
    43cc:	e0fffd17 	ldw	r3,-12(fp)
    43d0:	1885883a 	add	r2,r3,r2
    43d4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    43d8:	00001406 	br	442c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    43dc:	e0bff917 	ldw	r2,-28(fp)
    43e0:	10800037 	ldwio	r2,0(r2)
    43e4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    43e8:	e0bffb17 	ldw	r2,-20(fp)
    43ec:	10a0000c 	andi	r2,r2,32768
    43f0:	10000826 	beq	r2,zero,4414 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    43f4:	e0bffb17 	ldw	r2,-20(fp)
    43f8:	1007883a 	mov	r3,r2
    43fc:	e0bff817 	ldw	r2,-32(fp)
    4400:	10c00005 	stb	r3,0(r2)
    4404:	e0bff817 	ldw	r2,-32(fp)
    4408:	10800044 	addi	r2,r2,1
    440c:	e0bff815 	stw	r2,-32(fp)
    4410:	00000606 	br	442c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    4414:	e0fff817 	ldw	r3,-32(fp)
    4418:	e0bffd17 	ldw	r2,-12(fp)
    441c:	1880071e 	bne	r3,r2,443c <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    4420:	e0bfff17 	ldw	r2,-4(fp)
    4424:	1090000c 	andi	r2,r2,16384
    4428:	1000061e 	bne	r2,zero,4444 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    442c:	e0fff817 	ldw	r3,-32(fp)
    4430:	e0bffa17 	ldw	r2,-24(fp)
    4434:	18bfe936 	bltu	r3,r2,43dc <altera_avalon_jtag_uart_read+0x44>
    4438:	00000306 	br	4448 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    443c:	0001883a 	nop
    4440:	00000106 	br	4448 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    4444:	0001883a 	nop
    
  }

  if (ptr != buffer)
    4448:	e0fff817 	ldw	r3,-32(fp)
    444c:	e0bffd17 	ldw	r2,-12(fp)
    4450:	18800426 	beq	r3,r2,4464 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    4454:	e0fff817 	ldw	r3,-32(fp)
    4458:	e0bffd17 	ldw	r2,-12(fp)
    445c:	1885c83a 	sub	r2,r3,r2
    4460:	00000606 	br	447c <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    4464:	e0bfff17 	ldw	r2,-4(fp)
    4468:	1090000c 	andi	r2,r2,16384
    446c:	10000226 	beq	r2,zero,4478 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    4470:	00bffd44 	movi	r2,-11
    4474:	00000106 	br	447c <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    4478:	00bffec4 	movi	r2,-5
}
    447c:	e037883a 	mov	sp,fp
    4480:	df000017 	ldw	fp,0(sp)
    4484:	dec00104 	addi	sp,sp,4
    4488:	f800283a 	ret

0000448c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    448c:	defff904 	addi	sp,sp,-28
    4490:	df000615 	stw	fp,24(sp)
    4494:	df000604 	addi	fp,sp,24
    4498:	e13ffc15 	stw	r4,-16(fp)
    449c:	e17ffd15 	stw	r5,-12(fp)
    44a0:	e1bffe15 	stw	r6,-8(fp)
    44a4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    44a8:	e0bffc17 	ldw	r2,-16(fp)
    44ac:	10800017 	ldw	r2,0(r2)
    44b0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    44b4:	e0bffe17 	ldw	r2,-8(fp)
    44b8:	e0fffd17 	ldw	r3,-12(fp)
    44bc:	1885883a 	add	r2,r3,r2
    44c0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    44c4:	00000f06 	br	4504 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    44c8:	e0bffa17 	ldw	r2,-24(fp)
    44cc:	10800104 	addi	r2,r2,4
    44d0:	10800037 	ldwio	r2,0(r2)
    44d4:	10bfffec 	andhi	r2,r2,65535
    44d8:	10000a26 	beq	r2,zero,4504 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    44dc:	e0bffa17 	ldw	r2,-24(fp)
    44e0:	e0fffd17 	ldw	r3,-12(fp)
    44e4:	18c00003 	ldbu	r3,0(r3)
    44e8:	18c03fcc 	andi	r3,r3,255
    44ec:	18c0201c 	xori	r3,r3,128
    44f0:	18ffe004 	addi	r3,r3,-128
    44f4:	e13ffd17 	ldw	r4,-12(fp)
    44f8:	21000044 	addi	r4,r4,1
    44fc:	e13ffd15 	stw	r4,-12(fp)
    4500:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4504:	e0fffd17 	ldw	r3,-12(fp)
    4508:	e0bffb17 	ldw	r2,-20(fp)
    450c:	18bfee36 	bltu	r3,r2,44c8 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    4510:	e0bffe17 	ldw	r2,-8(fp)
}
    4514:	e037883a 	mov	sp,fp
    4518:	df000017 	ldw	fp,0(sp)
    451c:	dec00104 	addi	sp,sp,4
    4520:	f800283a 	ret

00004524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4524:	defffe04 	addi	sp,sp,-8
    4528:	dfc00115 	stw	ra,4(sp)
    452c:	df000015 	stw	fp,0(sp)
    4530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4534:	00800034 	movhi	r2,0
    4538:	10946904 	addi	r2,r2,20900
    453c:	10800017 	ldw	r2,0(r2)
    4540:	10000526 	beq	r2,zero,4558 <alt_get_errno+0x34>
    4544:	00800034 	movhi	r2,0
    4548:	10946904 	addi	r2,r2,20900
    454c:	10800017 	ldw	r2,0(r2)
    4550:	103ee83a 	callr	r2
    4554:	00000206 	br	4560 <alt_get_errno+0x3c>
    4558:	00800034 	movhi	r2,0
    455c:	1094e904 	addi	r2,r2,21412
}
    4560:	e037883a 	mov	sp,fp
    4564:	dfc00117 	ldw	ra,4(sp)
    4568:	df000017 	ldw	fp,0(sp)
    456c:	dec00204 	addi	sp,sp,8
    4570:	f800283a 	ret

00004574 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    4574:	defffb04 	addi	sp,sp,-20
    4578:	dfc00415 	stw	ra,16(sp)
    457c:	df000315 	stw	fp,12(sp)
    4580:	df000304 	addi	fp,sp,12
    4584:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4588:	e0bfff17 	ldw	r2,-4(fp)
    458c:	10000616 	blt	r2,zero,45a8 <close+0x34>
    4590:	e0bfff17 	ldw	r2,-4(fp)
    4594:	10c00324 	muli	r3,r2,12
    4598:	00800034 	movhi	r2,0
    459c:	10940304 	addi	r2,r2,20492
    45a0:	1885883a 	add	r2,r3,r2
    45a4:	00000106 	br	45ac <close+0x38>
    45a8:	0005883a 	mov	r2,zero
    45ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    45b0:	e0bffd17 	ldw	r2,-12(fp)
    45b4:	10001826 	beq	r2,zero,4618 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    45b8:	e0bffd17 	ldw	r2,-12(fp)
    45bc:	10800017 	ldw	r2,0(r2)
    45c0:	10800417 	ldw	r2,16(r2)
    45c4:	10000626 	beq	r2,zero,45e0 <close+0x6c>
    45c8:	e0bffd17 	ldw	r2,-12(fp)
    45cc:	10800017 	ldw	r2,0(r2)
    45d0:	10800417 	ldw	r2,16(r2)
    45d4:	e13ffd17 	ldw	r4,-12(fp)
    45d8:	103ee83a 	callr	r2
    45dc:	00000106 	br	45e4 <close+0x70>
    45e0:	0005883a 	mov	r2,zero
    45e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    45e8:	e13fff17 	ldw	r4,-4(fp)
    45ec:	0004bb00 	call	4bb0 <alt_release_fd>
    if (rval < 0)
    45f0:	e0bffe17 	ldw	r2,-8(fp)
    45f4:	1000060e 	bge	r2,zero,4610 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    45f8:	00045240 	call	4524 <alt_get_errno>
    45fc:	e0fffe17 	ldw	r3,-8(fp)
    4600:	00c7c83a 	sub	r3,zero,r3
    4604:	10c00015 	stw	r3,0(r2)
      return -1;
    4608:	00bfffc4 	movi	r2,-1
    460c:	00000606 	br	4628 <close+0xb4>
    }
    return 0;
    4610:	0005883a 	mov	r2,zero
    4614:	00000406 	br	4628 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4618:	00045240 	call	4524 <alt_get_errno>
    461c:	00c01444 	movi	r3,81
    4620:	10c00015 	stw	r3,0(r2)
    return -1;
    4624:	00bfffc4 	movi	r2,-1
  }
}
    4628:	e037883a 	mov	sp,fp
    462c:	dfc00117 	ldw	ra,4(sp)
    4630:	df000017 	ldw	fp,0(sp)
    4634:	dec00204 	addi	sp,sp,8
    4638:	f800283a 	ret

0000463c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    463c:	defffe04 	addi	sp,sp,-8
    4640:	df000115 	stw	fp,4(sp)
    4644:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4648:	e03fff15 	stw	zero,-4(fp)
    464c:	00000506 	br	4664 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    4650:	e0bfff17 	ldw	r2,-4(fp)
    4654:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4658:	e0bfff17 	ldw	r2,-4(fp)
    465c:	10800804 	addi	r2,r2,32
    4660:	e0bfff15 	stw	r2,-4(fp)
    4664:	e0bfff17 	ldw	r2,-4(fp)
    4668:	10820030 	cmpltui	r2,r2,2048
    466c:	103ff81e 	bne	r2,zero,4650 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4670:	e037883a 	mov	sp,fp
    4674:	df000017 	ldw	fp,0(sp)
    4678:	dec00104 	addi	sp,sp,4
    467c:	f800283a 	ret

00004680 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4680:	defffc04 	addi	sp,sp,-16
    4684:	df000315 	stw	fp,12(sp)
    4688:	df000304 	addi	fp,sp,12
    468c:	e13ffd15 	stw	r4,-12(fp)
    4690:	e17ffe15 	stw	r5,-8(fp)
    4694:	e1bfff15 	stw	r6,-4(fp)
  return len;
    4698:	e0bfff17 	ldw	r2,-4(fp)
}
    469c:	e037883a 	mov	sp,fp
    46a0:	df000017 	ldw	fp,0(sp)
    46a4:	dec00104 	addi	sp,sp,4
    46a8:	f800283a 	ret

000046ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    46ac:	defffe04 	addi	sp,sp,-8
    46b0:	dfc00115 	stw	ra,4(sp)
    46b4:	df000015 	stw	fp,0(sp)
    46b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    46bc:	00800034 	movhi	r2,0
    46c0:	10946904 	addi	r2,r2,20900
    46c4:	10800017 	ldw	r2,0(r2)
    46c8:	10000526 	beq	r2,zero,46e0 <alt_get_errno+0x34>
    46cc:	00800034 	movhi	r2,0
    46d0:	10946904 	addi	r2,r2,20900
    46d4:	10800017 	ldw	r2,0(r2)
    46d8:	103ee83a 	callr	r2
    46dc:	00000206 	br	46e8 <alt_get_errno+0x3c>
    46e0:	00800034 	movhi	r2,0
    46e4:	1094e904 	addi	r2,r2,21412
}
    46e8:	e037883a 	mov	sp,fp
    46ec:	dfc00117 	ldw	ra,4(sp)
    46f0:	df000017 	ldw	fp,0(sp)
    46f4:	dec00204 	addi	sp,sp,8
    46f8:	f800283a 	ret

000046fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    46fc:	defffa04 	addi	sp,sp,-24
    4700:	dfc00515 	stw	ra,20(sp)
    4704:	df000415 	stw	fp,16(sp)
    4708:	df000404 	addi	fp,sp,16
    470c:	e13ffe15 	stw	r4,-8(fp)
    4710:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4714:	e0bffe17 	ldw	r2,-8(fp)
    4718:	10000326 	beq	r2,zero,4728 <alt_dev_llist_insert+0x2c>
    471c:	e0bffe17 	ldw	r2,-8(fp)
    4720:	10800217 	ldw	r2,8(r2)
    4724:	1000051e 	bne	r2,zero,473c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    4728:	00046ac0 	call	46ac <alt_get_errno>
    472c:	00c00584 	movi	r3,22
    4730:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    4734:	00bffa84 	movi	r2,-22
    4738:	00001306 	br	4788 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    473c:	e0bffe17 	ldw	r2,-8(fp)
    4740:	e0ffff17 	ldw	r3,-4(fp)
    4744:	e0fffc15 	stw	r3,-16(fp)
    4748:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    474c:	e0bffd17 	ldw	r2,-12(fp)
    4750:	e0fffc17 	ldw	r3,-16(fp)
    4754:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4758:	e0bffc17 	ldw	r2,-16(fp)
    475c:	10c00017 	ldw	r3,0(r2)
    4760:	e0bffd17 	ldw	r2,-12(fp)
    4764:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4768:	e0bffc17 	ldw	r2,-16(fp)
    476c:	10800017 	ldw	r2,0(r2)
    4770:	e0fffd17 	ldw	r3,-12(fp)
    4774:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4778:	e0bffc17 	ldw	r2,-16(fp)
    477c:	e0fffd17 	ldw	r3,-12(fp)
    4780:	10c00015 	stw	r3,0(r2)

  return 0;  
    4784:	0005883a 	mov	r2,zero
}
    4788:	e037883a 	mov	sp,fp
    478c:	dfc00117 	ldw	ra,4(sp)
    4790:	df000017 	ldw	fp,0(sp)
    4794:	dec00204 	addi	sp,sp,8
    4798:	f800283a 	ret

0000479c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    479c:	defffc04 	addi	sp,sp,-16
    47a0:	df000315 	stw	fp,12(sp)
    47a4:	df000304 	addi	fp,sp,12
    47a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    47ac:	0001883a 	nop
    47b0:	e0bfff17 	ldw	r2,-4(fp)
    47b4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    47b8:	e0bffd17 	ldw	r2,-12(fp)
    47bc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    47c0:	e0bffe17 	ldw	r2,-8(fp)
    47c4:	10000226 	beq	r2,zero,47d0 <_exit+0x34>
    ALT_SIM_FAIL();
    47c8:	002af070 	cmpltui	zero,zero,43969
    47cc:	00000106 	br	47d4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    47d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    47d4:	003fff06 	br	47d4 <_exit+0x38>

000047d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    47d8:	defffe04 	addi	sp,sp,-8
    47dc:	dfc00115 	stw	ra,4(sp)
    47e0:	df000015 	stw	fp,0(sp)
    47e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    47e8:	0009883a 	mov	r4,zero
    47ec:	01440004 	movi	r5,4096
    47f0:	0004e880 	call	4e88 <alt_icache_flush>
#endif
}
    47f4:	e037883a 	mov	sp,fp
    47f8:	dfc00117 	ldw	ra,4(sp)
    47fc:	df000017 	ldw	fp,0(sp)
    4800:	dec00204 	addi	sp,sp,8
    4804:	f800283a 	ret

00004808 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4808:	defff904 	addi	sp,sp,-28
    480c:	dfc00615 	stw	ra,24(sp)
    4810:	df000515 	stw	fp,20(sp)
    4814:	df000504 	addi	fp,sp,20
    4818:	e13ffc15 	stw	r4,-16(fp)
    481c:	e17ffd15 	stw	r5,-12(fp)
    4820:	e1bffe15 	stw	r6,-8(fp)
    4824:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    4828:	e13ffd17 	ldw	r4,-12(fp)
    482c:	e17ffe17 	ldw	r5,-8(fp)
    4830:	e1bfff17 	ldw	r6,-4(fp)
    4834:	0004a5c0 	call	4a5c <open>
    4838:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    483c:	e0bffb17 	ldw	r2,-20(fp)
    4840:	10001c16 	blt	r2,zero,48b4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    4844:	00c00034 	movhi	r3,0
    4848:	18d40304 	addi	r3,r3,20492
    484c:	e0bffb17 	ldw	r2,-20(fp)
    4850:	10800324 	muli	r2,r2,12
    4854:	1885883a 	add	r2,r3,r2
    4858:	10c00017 	ldw	r3,0(r2)
    485c:	e0bffc17 	ldw	r2,-16(fp)
    4860:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4864:	00c00034 	movhi	r3,0
    4868:	18d40304 	addi	r3,r3,20492
    486c:	e0bffb17 	ldw	r2,-20(fp)
    4870:	10800324 	muli	r2,r2,12
    4874:	1885883a 	add	r2,r3,r2
    4878:	10800104 	addi	r2,r2,4
    487c:	10c00017 	ldw	r3,0(r2)
    4880:	e0bffc17 	ldw	r2,-16(fp)
    4884:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4888:	00c00034 	movhi	r3,0
    488c:	18d40304 	addi	r3,r3,20492
    4890:	e0bffb17 	ldw	r2,-20(fp)
    4894:	10800324 	muli	r2,r2,12
    4898:	1885883a 	add	r2,r3,r2
    489c:	10800204 	addi	r2,r2,8
    48a0:	10c00017 	ldw	r3,0(r2)
    48a4:	e0bffc17 	ldw	r2,-16(fp)
    48a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    48ac:	e13ffb17 	ldw	r4,-20(fp)
    48b0:	0004bb00 	call	4bb0 <alt_release_fd>
  }
} 
    48b4:	e037883a 	mov	sp,fp
    48b8:	dfc00117 	ldw	ra,4(sp)
    48bc:	df000017 	ldw	fp,0(sp)
    48c0:	dec00204 	addi	sp,sp,8
    48c4:	f800283a 	ret

000048c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    48c8:	defffb04 	addi	sp,sp,-20
    48cc:	dfc00415 	stw	ra,16(sp)
    48d0:	df000315 	stw	fp,12(sp)
    48d4:	df000304 	addi	fp,sp,12
    48d8:	e13ffd15 	stw	r4,-12(fp)
    48dc:	e17ffe15 	stw	r5,-8(fp)
    48e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    48e4:	01000034 	movhi	r4,0
    48e8:	21140604 	addi	r4,r4,20504
    48ec:	e17ffd17 	ldw	r5,-12(fp)
    48f0:	01800044 	movi	r6,1
    48f4:	01c07fc4 	movi	r7,511
    48f8:	00048080 	call	4808 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    48fc:	01000034 	movhi	r4,0
    4900:	21140304 	addi	r4,r4,20492
    4904:	e17ffe17 	ldw	r5,-8(fp)
    4908:	000d883a 	mov	r6,zero
    490c:	01c07fc4 	movi	r7,511
    4910:	00048080 	call	4808 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4914:	01000034 	movhi	r4,0
    4918:	21140904 	addi	r4,r4,20516
    491c:	e17fff17 	ldw	r5,-4(fp)
    4920:	01800044 	movi	r6,1
    4924:	01c07fc4 	movi	r7,511
    4928:	00048080 	call	4808 <alt_open_fd>
}  
    492c:	e037883a 	mov	sp,fp
    4930:	dfc00117 	ldw	ra,4(sp)
    4934:	df000017 	ldw	fp,0(sp)
    4938:	dec00204 	addi	sp,sp,8
    493c:	f800283a 	ret

00004940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4940:	defffe04 	addi	sp,sp,-8
    4944:	dfc00115 	stw	ra,4(sp)
    4948:	df000015 	stw	fp,0(sp)
    494c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4950:	00800034 	movhi	r2,0
    4954:	10946904 	addi	r2,r2,20900
    4958:	10800017 	ldw	r2,0(r2)
    495c:	10000526 	beq	r2,zero,4974 <alt_get_errno+0x34>
    4960:	00800034 	movhi	r2,0
    4964:	10946904 	addi	r2,r2,20900
    4968:	10800017 	ldw	r2,0(r2)
    496c:	103ee83a 	callr	r2
    4970:	00000206 	br	497c <alt_get_errno+0x3c>
    4974:	00800034 	movhi	r2,0
    4978:	1094e904 	addi	r2,r2,21412
}
    497c:	e037883a 	mov	sp,fp
    4980:	dfc00117 	ldw	ra,4(sp)
    4984:	df000017 	ldw	fp,0(sp)
    4988:	dec00204 	addi	sp,sp,8
    498c:	f800283a 	ret

00004990 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4990:	defffd04 	addi	sp,sp,-12
    4994:	df000215 	stw	fp,8(sp)
    4998:	df000204 	addi	fp,sp,8
    499c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    49a0:	e0bfff17 	ldw	r2,-4(fp)
    49a4:	10800217 	ldw	r2,8(r2)
    49a8:	10d00034 	orhi	r3,r2,16384
    49ac:	e0bfff17 	ldw	r2,-4(fp)
    49b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    49b4:	e03ffe15 	stw	zero,-8(fp)
    49b8:	00001d06 	br	4a30 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    49bc:	00c00034 	movhi	r3,0
    49c0:	18d40304 	addi	r3,r3,20492
    49c4:	e0bffe17 	ldw	r2,-8(fp)
    49c8:	10800324 	muli	r2,r2,12
    49cc:	1885883a 	add	r2,r3,r2
    49d0:	10c00017 	ldw	r3,0(r2)
    49d4:	e0bfff17 	ldw	r2,-4(fp)
    49d8:	10800017 	ldw	r2,0(r2)
    49dc:	1880111e 	bne	r3,r2,4a24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    49e0:	00c00034 	movhi	r3,0
    49e4:	18d40304 	addi	r3,r3,20492
    49e8:	e0bffe17 	ldw	r2,-8(fp)
    49ec:	10800324 	muli	r2,r2,12
    49f0:	1885883a 	add	r2,r3,r2
    49f4:	10800204 	addi	r2,r2,8
    49f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    49fc:	1000090e 	bge	r2,zero,4a24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    4a00:	e0bffe17 	ldw	r2,-8(fp)
    4a04:	10c00324 	muli	r3,r2,12
    4a08:	00800034 	movhi	r2,0
    4a0c:	10940304 	addi	r2,r2,20492
    4a10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4a14:	e0bfff17 	ldw	r2,-4(fp)
    4a18:	18800226 	beq	r3,r2,4a24 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4a1c:	00bffcc4 	movi	r2,-13
    4a20:	00000a06 	br	4a4c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4a24:	e0bffe17 	ldw	r2,-8(fp)
    4a28:	10800044 	addi	r2,r2,1
    4a2c:	e0bffe15 	stw	r2,-8(fp)
    4a30:	00800034 	movhi	r2,0
    4a34:	10946804 	addi	r2,r2,20896
    4a38:	10800017 	ldw	r2,0(r2)
    4a3c:	1007883a 	mov	r3,r2
    4a40:	e0bffe17 	ldw	r2,-8(fp)
    4a44:	18bfdd2e 	bgeu	r3,r2,49bc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4a48:	0005883a 	mov	r2,zero
}
    4a4c:	e037883a 	mov	sp,fp
    4a50:	df000017 	ldw	fp,0(sp)
    4a54:	dec00104 	addi	sp,sp,4
    4a58:	f800283a 	ret

00004a5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4a5c:	defff604 	addi	sp,sp,-40
    4a60:	dfc00915 	stw	ra,36(sp)
    4a64:	df000815 	stw	fp,32(sp)
    4a68:	df000804 	addi	fp,sp,32
    4a6c:	e13ffd15 	stw	r4,-12(fp)
    4a70:	e17ffe15 	stw	r5,-8(fp)
    4a74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4a78:	00bfffc4 	movi	r2,-1
    4a7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4a80:	00bffb44 	movi	r2,-19
    4a84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    4a88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4a8c:	e13ffd17 	ldw	r4,-12(fp)
    4a90:	01400034 	movhi	r5,0
    4a94:	29546604 	addi	r5,r5,20888
    4a98:	0004c300 	call	4c30 <alt_find_dev>
    4a9c:	e0bff815 	stw	r2,-32(fp)
    4aa0:	e0bff817 	ldw	r2,-32(fp)
    4aa4:	1000051e 	bne	r2,zero,4abc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4aa8:	e13ffd17 	ldw	r4,-12(fp)
    4aac:	0004cc00 	call	4cc0 <alt_find_file>
    4ab0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    4ab4:	00800044 	movi	r2,1
    4ab8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4abc:	e0bff817 	ldw	r2,-32(fp)
    4ac0:	10002926 	beq	r2,zero,4b68 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4ac4:	e13ff817 	ldw	r4,-32(fp)
    4ac8:	0004dd40 	call	4dd4 <alt_get_fd>
    4acc:	e0bff915 	stw	r2,-28(fp)
    4ad0:	e0bff917 	ldw	r2,-28(fp)
    4ad4:	1000030e 	bge	r2,zero,4ae4 <open+0x88>
    {
      status = index;
    4ad8:	e0bff917 	ldw	r2,-28(fp)
    4adc:	e0bffa15 	stw	r2,-24(fp)
    4ae0:	00002306 	br	4b70 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    4ae4:	e0bff917 	ldw	r2,-28(fp)
    4ae8:	10c00324 	muli	r3,r2,12
    4aec:	00800034 	movhi	r2,0
    4af0:	10940304 	addi	r2,r2,20492
    4af4:	1885883a 	add	r2,r3,r2
    4af8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4afc:	e0fffe17 	ldw	r3,-8(fp)
    4b00:	00900034 	movhi	r2,16384
    4b04:	10bfffc4 	addi	r2,r2,-1
    4b08:	1886703a 	and	r3,r3,r2
    4b0c:	e0bffc17 	ldw	r2,-16(fp)
    4b10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4b14:	e0bffb17 	ldw	r2,-20(fp)
    4b18:	1000051e 	bne	r2,zero,4b30 <open+0xd4>
    4b1c:	e13ffc17 	ldw	r4,-16(fp)
    4b20:	00049900 	call	4990 <alt_file_locked>
    4b24:	e0bffa15 	stw	r2,-24(fp)
    4b28:	e0bffa17 	ldw	r2,-24(fp)
    4b2c:	10001016 	blt	r2,zero,4b70 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4b30:	e0bff817 	ldw	r2,-32(fp)
    4b34:	10800317 	ldw	r2,12(r2)
    4b38:	10000826 	beq	r2,zero,4b5c <open+0x100>
    4b3c:	e0bff817 	ldw	r2,-32(fp)
    4b40:	10800317 	ldw	r2,12(r2)
    4b44:	e13ffc17 	ldw	r4,-16(fp)
    4b48:	e17ffd17 	ldw	r5,-12(fp)
    4b4c:	e1bffe17 	ldw	r6,-8(fp)
    4b50:	e1ffff17 	ldw	r7,-4(fp)
    4b54:	103ee83a 	callr	r2
    4b58:	00000106 	br	4b60 <open+0x104>
    4b5c:	0005883a 	mov	r2,zero
    4b60:	e0bffa15 	stw	r2,-24(fp)
    4b64:	00000206 	br	4b70 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4b68:	00bffb44 	movi	r2,-19
    4b6c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4b70:	e0bffa17 	ldw	r2,-24(fp)
    4b74:	1000080e 	bge	r2,zero,4b98 <open+0x13c>
  {
    alt_release_fd (index);  
    4b78:	e13ff917 	ldw	r4,-28(fp)
    4b7c:	0004bb00 	call	4bb0 <alt_release_fd>
    ALT_ERRNO = -status;
    4b80:	00049400 	call	4940 <alt_get_errno>
    4b84:	e0fffa17 	ldw	r3,-24(fp)
    4b88:	00c7c83a 	sub	r3,zero,r3
    4b8c:	10c00015 	stw	r3,0(r2)
    return -1;
    4b90:	00bfffc4 	movi	r2,-1
    4b94:	00000106 	br	4b9c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    4b98:	e0bff917 	ldw	r2,-28(fp)
}
    4b9c:	e037883a 	mov	sp,fp
    4ba0:	dfc00117 	ldw	ra,4(sp)
    4ba4:	df000017 	ldw	fp,0(sp)
    4ba8:	dec00204 	addi	sp,sp,8
    4bac:	f800283a 	ret

00004bb0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4bb0:	defffe04 	addi	sp,sp,-8
    4bb4:	df000115 	stw	fp,4(sp)
    4bb8:	df000104 	addi	fp,sp,4
    4bbc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    4bc0:	e0bfff17 	ldw	r2,-4(fp)
    4bc4:	108000d0 	cmplti	r2,r2,3
    4bc8:	10000d1e 	bne	r2,zero,4c00 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    4bcc:	00c00034 	movhi	r3,0
    4bd0:	18d40304 	addi	r3,r3,20492
    4bd4:	e0bfff17 	ldw	r2,-4(fp)
    4bd8:	10800324 	muli	r2,r2,12
    4bdc:	1885883a 	add	r2,r3,r2
    4be0:	10800204 	addi	r2,r2,8
    4be4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4be8:	00c00034 	movhi	r3,0
    4bec:	18d40304 	addi	r3,r3,20492
    4bf0:	e0bfff17 	ldw	r2,-4(fp)
    4bf4:	10800324 	muli	r2,r2,12
    4bf8:	1885883a 	add	r2,r3,r2
    4bfc:	10000015 	stw	zero,0(r2)
  }
}
    4c00:	e037883a 	mov	sp,fp
    4c04:	df000017 	ldw	fp,0(sp)
    4c08:	dec00104 	addi	sp,sp,4
    4c0c:	f800283a 	ret

00004c10 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    4c10:	deffff04 	addi	sp,sp,-4
    4c14:	df000015 	stw	fp,0(sp)
    4c18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    4c1c:	000170fa 	wrctl	ienable,zero
}
    4c20:	e037883a 	mov	sp,fp
    4c24:	df000017 	ldw	fp,0(sp)
    4c28:	dec00104 	addi	sp,sp,4
    4c2c:	f800283a 	ret

00004c30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4c30:	defffa04 	addi	sp,sp,-24
    4c34:	dfc00515 	stw	ra,20(sp)
    4c38:	df000415 	stw	fp,16(sp)
    4c3c:	df000404 	addi	fp,sp,16
    4c40:	e13ffe15 	stw	r4,-8(fp)
    4c44:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4c48:	e0bfff17 	ldw	r2,-4(fp)
    4c4c:	10800017 	ldw	r2,0(r2)
    4c50:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4c54:	e13ffe17 	ldw	r4,-8(fp)
    4c58:	0004f5c0 	call	4f5c <strlen>
    4c5c:	10800044 	addi	r2,r2,1
    4c60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4c64:	00000d06 	br	4c9c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4c68:	e0bffc17 	ldw	r2,-16(fp)
    4c6c:	10c00217 	ldw	r3,8(r2)
    4c70:	e0bffd17 	ldw	r2,-12(fp)
    4c74:	1809883a 	mov	r4,r3
    4c78:	e17ffe17 	ldw	r5,-8(fp)
    4c7c:	100d883a 	mov	r6,r2
    4c80:	0004f140 	call	4f14 <memcmp>
    4c84:	1000021e 	bne	r2,zero,4c90 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4c88:	e0bffc17 	ldw	r2,-16(fp)
    4c8c:	00000706 	br	4cac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4c90:	e0bffc17 	ldw	r2,-16(fp)
    4c94:	10800017 	ldw	r2,0(r2)
    4c98:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4c9c:	e0fffc17 	ldw	r3,-16(fp)
    4ca0:	e0bfff17 	ldw	r2,-4(fp)
    4ca4:	18bff01e 	bne	r3,r2,4c68 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    4ca8:	0005883a 	mov	r2,zero
}
    4cac:	e037883a 	mov	sp,fp
    4cb0:	dfc00117 	ldw	ra,4(sp)
    4cb4:	df000017 	ldw	fp,0(sp)
    4cb8:	dec00204 	addi	sp,sp,8
    4cbc:	f800283a 	ret

00004cc0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4cc0:	defffb04 	addi	sp,sp,-20
    4cc4:	dfc00415 	stw	ra,16(sp)
    4cc8:	df000315 	stw	fp,12(sp)
    4ccc:	df000304 	addi	fp,sp,12
    4cd0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4cd4:	00800034 	movhi	r2,0
    4cd8:	10946404 	addi	r2,r2,20880
    4cdc:	10800017 	ldw	r2,0(r2)
    4ce0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4ce4:	00003106 	br	4dac <alt_find_file+0xec>
  {
    len = strlen(next->name);
    4ce8:	e0bffd17 	ldw	r2,-12(fp)
    4cec:	10800217 	ldw	r2,8(r2)
    4cf0:	1009883a 	mov	r4,r2
    4cf4:	0004f5c0 	call	4f5c <strlen>
    4cf8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    4cfc:	e0bffd17 	ldw	r2,-12(fp)
    4d00:	10c00217 	ldw	r3,8(r2)
    4d04:	e0bffe17 	ldw	r2,-8(fp)
    4d08:	10bfffc4 	addi	r2,r2,-1
    4d0c:	1885883a 	add	r2,r3,r2
    4d10:	10800003 	ldbu	r2,0(r2)
    4d14:	10803fcc 	andi	r2,r2,255
    4d18:	1080201c 	xori	r2,r2,128
    4d1c:	10bfe004 	addi	r2,r2,-128
    4d20:	10800bd8 	cmpnei	r2,r2,47
    4d24:	1000031e 	bne	r2,zero,4d34 <alt_find_file+0x74>
    {
      len -= 1;
    4d28:	e0bffe17 	ldw	r2,-8(fp)
    4d2c:	10bfffc4 	addi	r2,r2,-1
    4d30:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4d34:	e0bffe17 	ldw	r2,-8(fp)
    4d38:	e0ffff17 	ldw	r3,-4(fp)
    4d3c:	1885883a 	add	r2,r3,r2
    4d40:	10800003 	ldbu	r2,0(r2)
    4d44:	10803fcc 	andi	r2,r2,255
    4d48:	1080201c 	xori	r2,r2,128
    4d4c:	10bfe004 	addi	r2,r2,-128
    4d50:	10800be0 	cmpeqi	r2,r2,47
    4d54:	1000081e 	bne	r2,zero,4d78 <alt_find_file+0xb8>
    4d58:	e0bffe17 	ldw	r2,-8(fp)
    4d5c:	e0ffff17 	ldw	r3,-4(fp)
    4d60:	1885883a 	add	r2,r3,r2
    4d64:	10800003 	ldbu	r2,0(r2)
    4d68:	10803fcc 	andi	r2,r2,255
    4d6c:	1080201c 	xori	r2,r2,128
    4d70:	10bfe004 	addi	r2,r2,-128
    4d74:	10000a1e 	bne	r2,zero,4da0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    4d78:	e0bffd17 	ldw	r2,-12(fp)
    4d7c:	10c00217 	ldw	r3,8(r2)
    4d80:	e0bffe17 	ldw	r2,-8(fp)
    4d84:	1809883a 	mov	r4,r3
    4d88:	e17fff17 	ldw	r5,-4(fp)
    4d8c:	100d883a 	mov	r6,r2
    4d90:	0004f140 	call	4f14 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4d94:	1000021e 	bne	r2,zero,4da0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    4d98:	e0bffd17 	ldw	r2,-12(fp)
    4d9c:	00000806 	br	4dc0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    4da0:	e0bffd17 	ldw	r2,-12(fp)
    4da4:	10800017 	ldw	r2,0(r2)
    4da8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4dac:	e0fffd17 	ldw	r3,-12(fp)
    4db0:	00800034 	movhi	r2,0
    4db4:	10946404 	addi	r2,r2,20880
    4db8:	18bfcb1e 	bne	r3,r2,4ce8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    4dbc:	0005883a 	mov	r2,zero
}
    4dc0:	e037883a 	mov	sp,fp
    4dc4:	dfc00117 	ldw	ra,4(sp)
    4dc8:	df000017 	ldw	fp,0(sp)
    4dcc:	dec00204 	addi	sp,sp,8
    4dd0:	f800283a 	ret

00004dd4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    4dd4:	defffc04 	addi	sp,sp,-16
    4dd8:	df000315 	stw	fp,12(sp)
    4ddc:	df000304 	addi	fp,sp,12
    4de0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    4de4:	00bffa04 	movi	r2,-24
    4de8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4dec:	e03ffd15 	stw	zero,-12(fp)
    4df0:	00001d06 	br	4e68 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    4df4:	00c00034 	movhi	r3,0
    4df8:	18d40304 	addi	r3,r3,20492
    4dfc:	e0bffd17 	ldw	r2,-12(fp)
    4e00:	10800324 	muli	r2,r2,12
    4e04:	1885883a 	add	r2,r3,r2
    4e08:	10800017 	ldw	r2,0(r2)
    4e0c:	1000131e 	bne	r2,zero,4e5c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    4e10:	00c00034 	movhi	r3,0
    4e14:	18d40304 	addi	r3,r3,20492
    4e18:	e0bffd17 	ldw	r2,-12(fp)
    4e1c:	10800324 	muli	r2,r2,12
    4e20:	1885883a 	add	r2,r3,r2
    4e24:	e0ffff17 	ldw	r3,-4(fp)
    4e28:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    4e2c:	00800034 	movhi	r2,0
    4e30:	10946804 	addi	r2,r2,20896
    4e34:	10c00017 	ldw	r3,0(r2)
    4e38:	e0bffd17 	ldw	r2,-12(fp)
    4e3c:	1880040e 	bge	r3,r2,4e50 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    4e40:	00800034 	movhi	r2,0
    4e44:	10946804 	addi	r2,r2,20896
    4e48:	e0fffd17 	ldw	r3,-12(fp)
    4e4c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    4e50:	e0bffd17 	ldw	r2,-12(fp)
    4e54:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    4e58:	00000606 	br	4e74 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4e5c:	e0bffd17 	ldw	r2,-12(fp)
    4e60:	10800044 	addi	r2,r2,1
    4e64:	e0bffd15 	stw	r2,-12(fp)
    4e68:	e0bffd17 	ldw	r2,-12(fp)
    4e6c:	10800810 	cmplti	r2,r2,32
    4e70:	103fe01e 	bne	r2,zero,4df4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    4e74:	e0bffe17 	ldw	r2,-8(fp)
}
    4e78:	e037883a 	mov	sp,fp
    4e7c:	df000017 	ldw	fp,0(sp)
    4e80:	dec00104 	addi	sp,sp,4
    4e84:	f800283a 	ret

00004e88 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    4e88:	defffb04 	addi	sp,sp,-20
    4e8c:	df000415 	stw	fp,16(sp)
    4e90:	df000404 	addi	fp,sp,16
    4e94:	e13ffe15 	stw	r4,-8(fp)
    4e98:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    4e9c:	e0bfff17 	ldw	r2,-4(fp)
    4ea0:	10840070 	cmpltui	r2,r2,4097
    4ea4:	1000021e 	bne	r2,zero,4eb0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    4ea8:	00840004 	movi	r2,4096
    4eac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    4eb0:	e0fffe17 	ldw	r3,-8(fp)
    4eb4:	e0bfff17 	ldw	r2,-4(fp)
    4eb8:	1885883a 	add	r2,r3,r2
    4ebc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4ec0:	e0bffe17 	ldw	r2,-8(fp)
    4ec4:	e0bffc15 	stw	r2,-16(fp)
    4ec8:	00000506 	br	4ee0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    4ecc:	e0bffc17 	ldw	r2,-16(fp)
    4ed0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4ed4:	e0bffc17 	ldw	r2,-16(fp)
    4ed8:	10800804 	addi	r2,r2,32
    4edc:	e0bffc15 	stw	r2,-16(fp)
    4ee0:	e0fffc17 	ldw	r3,-16(fp)
    4ee4:	e0bffd17 	ldw	r2,-12(fp)
    4ee8:	18bff836 	bltu	r3,r2,4ecc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    4eec:	e0bffe17 	ldw	r2,-8(fp)
    4ef0:	108007cc 	andi	r2,r2,31
    4ef4:	10000226 	beq	r2,zero,4f00 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    4ef8:	e0bffc17 	ldw	r2,-16(fp)
    4efc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    4f00:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    4f04:	e037883a 	mov	sp,fp
    4f08:	df000017 	ldw	fp,0(sp)
    4f0c:	dec00104 	addi	sp,sp,4
    4f10:	f800283a 	ret

00004f14 <memcmp>:
    4f14:	30000d26 	beq	r6,zero,4f4c <memcmp+0x38>
    4f18:	20c00003 	ldbu	r3,0(r4)
    4f1c:	28800003 	ldbu	r2,0(r5)
    4f20:	18800c1e 	bne	r3,r2,4f54 <memcmp+0x40>
    4f24:	31bfff84 	addi	r6,r6,-2
    4f28:	01ffffc4 	movi	r7,-1
    4f2c:	00000406 	br	4f40 <memcmp+0x2c>
    4f30:	20c00003 	ldbu	r3,0(r4)
    4f34:	28800003 	ldbu	r2,0(r5)
    4f38:	31bfffc4 	addi	r6,r6,-1
    4f3c:	1880051e 	bne	r3,r2,4f54 <memcmp+0x40>
    4f40:	21000044 	addi	r4,r4,1
    4f44:	29400044 	addi	r5,r5,1
    4f48:	31fff91e 	bne	r6,r7,4f30 <memcmp+0x1c>
    4f4c:	0005883a 	mov	r2,zero
    4f50:	f800283a 	ret
    4f54:	1885c83a 	sub	r2,r3,r2
    4f58:	f800283a 	ret

00004f5c <strlen>:
    4f5c:	20800007 	ldb	r2,0(r4)
    4f60:	10000626 	beq	r2,zero,4f7c <strlen+0x20>
    4f64:	2005883a 	mov	r2,r4
    4f68:	10800044 	addi	r2,r2,1
    4f6c:	10c00007 	ldb	r3,0(r2)
    4f70:	183ffd1e 	bne	r3,zero,4f68 <strlen+0xc>
    4f74:	1105c83a 	sub	r2,r2,r4
    4f78:	f800283a 	ret
    4f7c:	0005883a 	mov	r2,zero
    4f80:	f800283a 	ret
